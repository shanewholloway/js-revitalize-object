'use strict';

const root_obj = {},
      root_list = [];
const ObjMap = 'undefined' !== typeof WeakMap ? WeakMap : Map;

class Revitalization extends Function {
  constructor() {
    throw new Error('Use the static .create() instead of new');
  }

  static create(token_p) {
    register.token = token_p || '\u039E'; // 'Îž'

    const lutRevive = new Map();
    const lutPreserve = new ObjMap();

    const self = Object.setPrototypeOf(register, this.prototype);
    Object.defineProperties(self, { lookupReviver: { value: lutRevive.get.bind(lutRevive) }, lookupPreserver: { value: lutPreserve.get.bind(lutPreserve) }, _setReviver: { value: _setReviver } });

    self.initRegistery(root_obj, root_list);
    return self;

    function register() {
      return self.register.apply(self, arguments);
    }

    function _setReviver(entry, kinds, matchers) {
      lutRevive.set(entry.kind, entry);
      return {
        alias(...kinds) {
          for (const each of kinds) {
            if (each) {
              lutRevive.set(each, entry);
            }
          }
          return this;
        }, match(...matchers) {
          for (const each of matchers) {
            if (null != each) {
              lutPreserve.set(each, entry);
            }
          }
          return this;
        } };
    }
  }

  initRegistery(root_obj, root_list) {
    this.register({ kind: '{root}',
      revive(obj, entry) {
        Object.assign(obj, entry.body);
      } }).match(root_obj);

    this.register({ kind: '[root]',
      preserve(rootList) {
        return { _: rootList.slice() };
      }, init(entry) {
        return [];
      }, revive(rootList, entry) {
        rootList.push.apply(rootList, entry.body._);
      } }).match(root_list);
  }

  register(revitalizer) {
    if ('kind' in revitalizer && revitalizer.revive) {
      return this.registerReviver(revitalizer);
    }

    let tgt;
    if (undefined !== revitalizer.prototype) {
      tgt = revitalizer.prototype[this.token];
      if (undefined !== tgt) {
        if ('function' === typeof tgt) {
          tgt = tgt.call(revitalizer.prototype, this);
          if (null == tgt) {
            return;
          }
        }
        if ('string' === typeof tgt) {
          return this.registerClass(tgt, revitalizer);
        }
      }
    }

    tgt = revitalizer[this.token];
    if (undefined !== tgt) {
      if ('function' === typeof tgt) {
        tgt = tgt.call(revitalizer, this);
        if (null == tgt) {
          return;
        }
      }
      if ('string' === typeof tgt) {
        return this.registerProto(tgt, revitalizer.prototype || revitalizer).match(revitalizer);
      }
    }

    throw new TypeError(`Unrecognized revitalization registration`);
  }

  registerReviver(entry) {
    {
      const kind = entry.kind;
      if ('string' !== typeof kind && true !== kind && false !== kind && null !== kind) {
        throw new TypeError(`"kind" must be a string`);
      }

      if (entry.init && 'function' !== typeof entry.init) {
        throw new TypeError('"init" must be a function');
      }

      if ('function' !== typeof entry.revive) {
        throw new TypeError('"revive" must be a function');
      }

      if (entry.preserve && 'function' !== typeof entry.preserve) {
        throw new TypeError('"preserve" must be a function if provided');
      }
    }

    return this._setReviver(entry);
  }

  registerClass(kind, klass) {
    return this.registerReviver({ kind,
      revive(obj, entry) {
        obj = Object.assign(obj, entry.body);
        Object.setPrototypeOf(obj, klass.prototype);
      } }).match(klass, klass.prototype);
  }

  registerProto(kind, proto) {
    return this.registerReviver({ kind,
      revive(obj, entry) {
        obj = Object.assign(obj, entry.body);
        Object.setPrototypeOf(obj, proto);
      } }).match(proto);
  }

  decode(aString, ctx) {
    if (null == ctx) {
      ctx = {};
    }
    const token = this.token,
          lookupReviver = this.lookupReviver;

    const queue = [],
          byOid = new Map();
    JSON.parse(aString, _json_create);

    const refs = new ObjMap();
    JSON.parse(aString, _json_restore);

    const evts = {};
    const _start = Promise.resolve().then(() => queue.reverse().map(entry => {
      entry.evts = evts;
      return entry.reviver.revive(entry.obj, entry, ctx);
    }));

    evts.started = _start.then(lst => lst.length);
    evts.finished = _start.then(lst => Promise.all(lst).then(lst => lst.length));

    evts.done = evts.finished.then(() => {
      const { obj, promise } = byOid.get(0);
      return undefined === promise ? obj : promise.then(ans => ans !== undefined ? ans : obj);
    });
    return evts.done;

    function _json_create(key, value) {
      if (token === key) {
        if ('number' === typeof value) {} else if (Array.isArray(value)) {
          delete this[token];

          const [kind, oid] = value;
          const reviver = lookupReviver(kind);
          if (undefined === reviver) {
            throw new ReviverNotFound(`Missing registered reviver for kind "${kind}"`);
          }

          const entry = { kind, oid, reviver, body: this };

          entry.obj = reviver.init ? reviver.init(entry, ctx) : Object.create(null);

          byOid.set(oid, entry);
          queue.push(entry);
        }
        return;
      }

      return value;
    }

    function _json_restore(key, value) {
      if (token === key) {
        if ('number' === typeof value) {
          refs.set(this, byOid.get(value).obj);
        } else if (Array.isArray(value)) {
          const entry = byOid.get(value[1]);
          entry.body = this;
          refs.set(this, entry.obj);
        }
        return;
      } else if (null === value || 'object' !== typeof value) {
        return value;
      }

      const ans = refs.get(value);
      return ans !== undefined ? ans : value;
    }
  }

  encode(anObject, ctx) {
    const refs = [];
    const promise = this.encodeObjects(anObject, ctx, (err, entry) => {
      refs[entry.oid] = entry.content;
    });

    const key = JSON.stringify(`${this.token}refs`);
    return promise.then(() => `{${key}: [\n  ${refs.join(',\n  ')} ]}\n`);
  }

  encodeObjects(anObject, ctx, callback) {
    if ('function' === typeof ctx) {
      callback = ctx;ctx = {};
    } else if (null == ctx) {
      ctx = {};
    }

    const token = this.token,
          lookupPreserver = this.lookupPreserver,
          findPreserver = this._boundFindPreserveForObj();

    const queue = [],
          lookup = new Map();
    JSON.stringify(anObject, _json_replacer);

    return _encodeQueue();

    function _encodeQueue() {
      if (0 === queue.length) {
        return;
      }

      const promises = [];
      while (0 !== queue.length) {
        const tip = queue.shift(),
              oid = tip.oid;
        promises.push(tip.then(body => {
          const content = JSON.stringify(body, _json_replacer);
          return callback(null, { oid, body, content });
        }).catch(err => callback(err)));
      }

      return Promise.all(promises).then(_encodeQueue);
    }

    function _json_replacer(key, value) {
      if (value === null || 'object' !== typeof value) {
        return value;
      }

      const prev = lookup.get(value);
      if (undefined !== prev) {
        return prev; // already serialized -- reference existing item
      }let entry = findPreserver(value);
      if (undefined === entry) {
        // not a "special" preserved item
        if (anObject !== value) {
          return value; // so serialize normally
        }
        // but it is the root, so store at oid 0
        entry = lookupPreserver(Array.isArray(value) ? root_list : root_obj);
      }

      // register id for object and return a JSON serializable version
      const oid = lookup.size;
      const ref = { [token]: oid };
      lookup.set(value, ref

      // transform live object into preserved form
      );const body = { [token]: [entry.kind, oid] };
      const promise = Promise.resolve(entry.preserve ? entry.preserve(value, ctx) : value).then(attrs => Object.assign(body, attrs));

      promise.oid = oid;
      queue.push(promise);
      return ref;
    }
  }

  _boundFindPreserveForObj() {
    const lookupPreserver = this.lookupPreserver;
    return function (obj) {
      let entry = lookupPreserver(obj);
      if (undefined !== entry) {
        return entry;
      }

      entry = lookupPreserver(obj.constructor);
      if (undefined !== entry) {
        return entry;
      }

      let proto = obj;
      while (null !== (proto = Object.getPrototypeOf(proto))) {
        let entry = lookupPreserver(proto);
        if (undefined !== entry) {
          return entry;
        }
      }
    };
  }
}

class ReviverNotFound extends Error {}

const createRegistry = Revitalization.create.bind(Revitalization);

module.exports = exports = createRegistry();
Object.assign(exports, { Revitalization, ReviverNotFound,
  createRegistry, create: createRegistry });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdF9vYmoiLCJyb290X2xpc3QiLCJPYmpNYXAiLCJXZWFrTWFwIiwiTWFwIiwiUmV2aXRhbGl6YXRpb24iLCJGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjcmVhdGUiLCJ0b2tlbl9wIiwicmVnaXN0ZXIiLCJ0b2tlbiIsImx1dFJldml2ZSIsImx1dFByZXNlcnZlIiwic2VsZiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiZGVmaW5lUHJvcGVydGllcyIsImxvb2t1cFJldml2ZXIiLCJ2YWx1ZSIsImdldCIsImJpbmQiLCJsb29rdXBQcmVzZXJ2ZXIiLCJfc2V0UmV2aXZlciIsImluaXRSZWdpc3RlcnkiLCJhcHBseSIsImFyZ3VtZW50cyIsImVudHJ5Iiwia2luZHMiLCJtYXRjaGVycyIsInNldCIsImtpbmQiLCJhbGlhcyIsImVhY2giLCJtYXRjaCIsInJldml2ZSIsIm9iaiIsImFzc2lnbiIsImJvZHkiLCJwcmVzZXJ2ZSIsInJvb3RMaXN0IiwiXyIsInNsaWNlIiwiaW5pdCIsInB1c2giLCJyZXZpdGFsaXplciIsInJlZ2lzdGVyUmV2aXZlciIsInRndCIsInVuZGVmaW5lZCIsImNhbGwiLCJyZWdpc3RlckNsYXNzIiwicmVnaXN0ZXJQcm90byIsIlR5cGVFcnJvciIsImtsYXNzIiwicHJvdG8iLCJkZWNvZGUiLCJhU3RyaW5nIiwiY3R4IiwicXVldWUiLCJieU9pZCIsIkpTT04iLCJwYXJzZSIsIl9qc29uX2NyZWF0ZSIsInJlZnMiLCJfanNvbl9yZXN0b3JlIiwiZXZ0cyIsIl9zdGFydCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJldmVyc2UiLCJtYXAiLCJyZXZpdmVyIiwic3RhcnRlZCIsImxzdCIsImxlbmd0aCIsImZpbmlzaGVkIiwiYWxsIiwiZG9uZSIsInByb21pc2UiLCJhbnMiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJvaWQiLCJSZXZpdmVyTm90Rm91bmQiLCJlbmNvZGUiLCJhbk9iamVjdCIsImVuY29kZU9iamVjdHMiLCJlcnIiLCJjb250ZW50Iiwic3RyaW5naWZ5Iiwiam9pbiIsImNhbGxiYWNrIiwiZmluZFByZXNlcnZlciIsIl9ib3VuZEZpbmRQcmVzZXJ2ZUZvck9iaiIsImxvb2t1cCIsIl9qc29uX3JlcGxhY2VyIiwiX2VuY29kZVF1ZXVlIiwicHJvbWlzZXMiLCJ0aXAiLCJzaGlmdCIsImNhdGNoIiwicHJldiIsInNpemUiLCJyZWYiLCJhdHRycyIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlUmVnaXN0cnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLFdBQVcsRUFBakI7QUFBQSxNQUFxQkMsWUFBWSxFQUFqQztBQUNBLE1BQU1DLFNBQVMsZ0JBQWdCLE9BQU9DLE9BQXZCLEdBQWlDQSxPQUFqQyxHQUEyQ0MsR0FBMUQ7O0FBRUEsTUFBTUMsY0FBTixTQUE2QkMsUUFBN0IsQ0FBc0M7QUFDcENDLGdCQUFjO0FBQ1osVUFBTSxJQUFJQyxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUEwRDs7QUFFNUQsU0FBT0MsTUFBUCxDQUFjQyxPQUFkLEVBQXVCO0FBQ3JCQyxhQUFTQyxLQUFULEdBQWlCRixXQUFXLFFBQTVCLENBRHFCLENBQ2dCOztBQUVyQyxVQUFNRyxZQUFVLElBQUlULEdBQUosRUFBaEI7QUFDQSxVQUFNVSxjQUFZLElBQUlaLE1BQUosRUFBbEI7O0FBRUEsVUFBTWEsT0FBT0MsT0FBT0MsY0FBUCxDQUFzQk4sUUFBdEIsRUFBZ0MsS0FBS08sU0FBckMsQ0FBYjtBQUNBRixXQUFPRyxnQkFBUCxDQUEwQkosSUFBMUIsRUFDRSxFQUFJSyxlQUFlLEVBQUlDLE9BQU9SLFVBQVVTLEdBQVYsQ0FBY0MsSUFBZCxDQUFtQlYsU0FBbkIsQ0FBWCxFQUFuQixFQUNJVyxpQkFBaUIsRUFBSUgsT0FBT1AsWUFBWVEsR0FBWixDQUFnQkMsSUFBaEIsQ0FBcUJULFdBQXJCLENBQVgs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QyxPQUFPNkYsY0FBUCxDQUFzQnJELEtBQXRCLENBQW5CLENBQU4sRUFBd0Q7QUFDdEQsWUFBSTNCLFFBQVFMLGdCQUFnQmdDLEtBQWhCLENBQVo7QUFDQSxZQUFHTixjQUFjckIsS0FBakIsRUFBeUI7QUFDdkIsaUJBQU9BLEtBQVA7QUFBWTtBQUFBO0FBQUEsS0FibEI7QUFha0I7QUF4UWdCOztBQTJRdEMsTUFBTTBELGVBQU4sU0FBOEIvRSxLQUE5QixDQUFvQzs7QUFFcEMsTUFBTXNHLGlCQUFpQnpHLGVBQWVJLE1BQWYsQ0FBc0JjLElBQXRCLENBQTJCbEIsY0FBM0IsQ0FBdkI7O0FBRUEwRyxPQUFPQyxPQUFQLEdBQWlCQSxVQUFVRixnQkFBM0I7QUFDQTlGLE9BQU91QixNQUFQLENBQWdCeUUsT0FBaEIsRUFDSSxFQUFJM0csY0FBSixFQUFvQmtGLGVBQXBCO0FBQ0l1QixnQkFESixFQUNvQnJHLFFBQVFxRyxjQUQ1QixFQURKIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgcm9vdF9vYmogPSB7fSwgcm9vdF9saXN0ID0gW11cbmNvbnN0IE9iak1hcCA9ICd1bmRlZmluZWQnICE9PSB0eXBlb2YgV2Vha01hcCA/IFdlYWtNYXAgOiBNYXBcblxuY2xhc3MgUmV2aXRhbGl6YXRpb24gZXh0ZW5kcyBGdW5jdGlvbiA6OlxuICBjb25zdHJ1Y3RvcigpIDo6XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVc2UgdGhlIHN0YXRpYyAuY3JlYXRlKCkgaW5zdGVhZCBvZiBuZXcnKVxuXG4gIHN0YXRpYyBjcmVhdGUodG9rZW5fcCkgOjpcbiAgICByZWdpc3Rlci50b2tlbiA9IHRva2VuX3AgfHwgJ1xcdTAzOUUnIC8vICfOnidcblxuICAgIGNvbnN0IGx1dFJldml2ZT1uZXcgTWFwKClcbiAgICBjb25zdCBsdXRQcmVzZXJ2ZT1uZXcgT2JqTWFwKClcblxuICAgIGNvbnN0IHNlbGYgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YocmVnaXN0ZXIsIHRoaXMucHJvdG90eXBlKVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIEAgc2VsZixcbiAgICAgIEB7fSBsb29rdXBSZXZpdmVyOiBAe30gdmFsdWU6IGx1dFJldml2ZS5nZXQuYmluZChsdXRSZXZpdmUpXG4gICAgICAgICwgbG9va3VwUHJlc2VydmVyOiBAe30gdmFsdWU6IGx1dFByZXNlcnZlLmdldC5iaW5kKGx1dFByZXNlcnZlKVxuICAgICAgICAsIF9zZXRSZXZpdmVyOiBAe30gdmFsdWU6IF9zZXRSZXZpdmVyXG5cblxuICAgIHNlbGYuaW5pdFJlZ2lzdGVyeShyb290X29iaiwgcm9vdF9saXN0KVxuICAgIHJldHVybiBzZWxmXG5cbiAgICBmdW5jdGlvbiByZWdpc3RlcigpIDo6XG4gICAgICByZXR1cm4gc2VsZi5yZWdpc3Rlci5hcHBseShzZWxmLCBhcmd1bWVudHMpXG5cbiAgICBmdW5jdGlvbiBfc2V0UmV2aXZlcihlbnRyeSwga2luZHMsIG1hdGNoZXJzKSA6OlxuICAgICAgbHV0UmV2aXZlLnNldChlbnRyeS5raW5kLCBlbnRyeSlcbiAgICAgIHJldHVybiA6OlxuICAgICAgICAgIGFsaWFzKC4uLmtpbmRzKSA6OlxuICAgICAgICAgICAgZm9yIGNvbnN0IGVhY2ggb2Yga2luZHMgOjpcbiAgICAgICAgICAgICAgaWYgZWFjaCA6OiBsdXRSZXZpdmUuc2V0KGVhY2gsIGVudHJ5KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgLCBtYXRjaCguLi5tYXRjaGVycykgOjpcbiAgICAgICAgICAgIGZvciBjb25zdCBlYWNoIG9mIG1hdGNoZXJzIDo6XG4gICAgICAgICAgICAgIGlmIG51bGwgIT0gZWFjaCA6OiBsdXRQcmVzZXJ2ZS5zZXQoZWFjaCwgZW50cnkpXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xuXG5cbiAgaW5pdFJlZ2lzdGVyeShyb290X29iaiwgcm9vdF9saXN0KSA6OlxuICAgIHRoaXNcbiAgICAgIC5yZWdpc3RlciBAOiBraW5kOiAne3Jvb3R9J1xuICAgICAgICAsIHJldml2ZShvYmosIGVudHJ5KSA6OiBPYmplY3QuYXNzaWduKG9iaiwgZW50cnkuYm9keSlcbiAgICAgIC5tYXRjaCBAIHJvb3Rfb2JqXG5cbiAgICB0aGlzXG4gICAgICAucmVnaXN0ZXIgQDoga2luZDogJ1tyb290XSdcbiAgICAgICAgLCBwcmVzZXJ2ZShyb290TGlzdCkgOjogcmV0dXJuIEB7fSBfOiByb290TGlzdC5zbGljZSgpXG4gICAgICAgICwgaW5pdChlbnRyeSkgOjogcmV0dXJuIFtdXG4gICAgICAgICwgcmV2aXZlKHJvb3RMaXN0LCBlbnRyeSkgOjpcbiAgICAgICAgICAgIHJvb3RMaXN0LnB1c2guYXBwbHkocm9vdExpc3QsIGVudHJ5LmJvZHkuXylcbiAgICAgIC5tYXRjaCBAIHJvb3RfbGlzdFxuXG4gIHJlZ2lzdGVyKHJldml0YWxpemVyKSA6OlxuICAgIGlmICdraW5kJyBpbiByZXZpdGFsaXplciAmJiByZXZpdGFsaXplci5yZXZpdmUgOjpcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyUmV2aXZlcihyZXZpdGFsaXplcilcblxuICAgIGxldCB0Z3RcbiAgICBpZiB1bmRlZmluZWQgIT09IHJldml0YWxpemVyLnByb3RvdHlwZSA6OlxuICAgICAgdGd0ID0gcmV2aXRhbGl6ZXIucHJvdG90eXBlW3RoaXMudG9rZW5dXG4gICAgICBpZiB1bmRlZmluZWQgIT09IHRndCA6OlxuICAgICAgICBpZiAnZnVuY3Rpb24nID09PSB0eXBlb2YgdGd0IDo6XG4gICAgICAgICAgdGd0ID0gdGd0LmNhbGwocmV2aXRhbGl6ZXIucHJvdG90eXBlLCB0aGlzKVxuICAgICAgICAgIGlmIG51bGwgPT0gdGd0IDo6IHJldHVyblxuICAgICAgICBpZiAnc3RyaW5nJyA9PT0gdHlwZW9mIHRndCA6OlxuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyQ2xhc3ModGd0LCByZXZpdGFsaXplcilcblxuICAgIHRndCA9IHJldml0YWxpemVyW3RoaXMudG9rZW5dXG4gICAgaWYgdW5kZWZpbmVkICE9PSB0Z3QgOjpcbiAgICAgIGlmICdmdW5jdGlvbicgPT09IHR5cGVvZiB0Z3QgOjpcbiAgICAgICAgdGd0ID0gdGd0LmNhbGwocmV2aXRhbGl6ZXIsIHRoaXMpXG4gICAgICAgIGlmIG51bGwgPT0gdGd0IDo6IHJldHVyblxuICAgICAgaWYgJ3N0cmluZycgPT09IHR5cGVvZiB0Z3QgOjpcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJQcm90byh0Z3QsIHJldml0YWxpemVyLnByb3RvdHlwZSB8fCByZXZpdGFsaXplcilcbiAgICAgICAgICAubWF0Y2gocmV2aXRhbGl6ZXIpXG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnJlY29nbml6ZWQgcmV2aXRhbGl6YXRpb24gcmVnaXN0cmF0aW9uYClcblxuICByZWdpc3RlclJldml2ZXIoZW50cnkpIDo6XG4gICAgOjpcbiAgICAgIGNvbnN0IGtpbmQgPSBlbnRyeS5raW5kXG4gICAgICBpZiAnc3RyaW5nJyAhPT0gdHlwZW9mIGtpbmQgJiYgdHJ1ZSAhPT0ga2luZCAmJiBmYWxzZSAhPT0ga2luZCAmJiBudWxsICE9PSBraW5kIDo6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IgQCBgXCJraW5kXCIgbXVzdCBiZSBhIHN0cmluZ2BcblxuICAgICAgaWYgZW50cnkuaW5pdCAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZW50cnkuaW5pdCA6OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yIEAgJ1wiaW5pdFwiIG11c3QgYmUgYSBmdW5jdGlvbidcblxuICAgICAgaWYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGVudHJ5LnJldml2ZSA6OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yIEAgJ1wicmV2aXZlXCIgbXVzdCBiZSBhIGZ1bmN0aW9uJ1xuXG4gICAgICBpZiBlbnRyeS5wcmVzZXJ2ZSAmJiAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZW50cnkucHJlc2VydmUgOjpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciBAICdcInByZXNlcnZlXCIgbXVzdCBiZSBhIGZ1bmN0aW9uIGlmIHByb3ZpZGVkJ1xuXG4gICAgcmV0dXJuIHRoaXMuX3NldFJldml2ZXIoZW50cnkpXG5cbiAgcmVnaXN0ZXJDbGFzcyhraW5kLCBrbGFzcykgOjpcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLnJlZ2lzdGVyUmV2aXZlciBAOiBraW5kLFxuICAgICAgICByZXZpdmUob2JqLCBlbnRyeSkgOjpcbiAgICAgICAgICBvYmogPSBPYmplY3QuYXNzaWduKG9iaiwgZW50cnkuYm9keSlcbiAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBrbGFzcy5wcm90b3R5cGUpXG4gICAgICAubWF0Y2goa2xhc3MsIGtsYXNzLnByb3RvdHlwZSlcblxuICByZWdpc3RlclByb3RvKGtpbmQsIHByb3RvKSA6OlxuICAgIHJldHVybiB0aGlzXG4gICAgICAucmVnaXN0ZXJSZXZpdmVyIEA6IGtpbmQsXG4gICAgICAgIHJldml2ZShvYmosIGVudHJ5KSA6OlxuICAgICAgICAgIG9iaiA9IE9iamVjdC5hc3NpZ24ob2JqLCBlbnRyeS5ib2R5KVxuICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmosIHByb3RvKVxuICAgICAgLm1hdGNoKHByb3RvKVxuXG5cbiAgZGVjb2RlKGFTdHJpbmcsIGN0eCkgOjpcbiAgICBpZiBudWxsID09IGN0eCA6OiBjdHggPSB7fVxuICAgIGNvbnN0IHRva2VuPXRoaXMudG9rZW4sIGxvb2t1cFJldml2ZXI9dGhpcy5sb29rdXBSZXZpdmVyXG5cbiAgICBjb25zdCBxdWV1ZT1bXSwgYnlPaWQ9bmV3IE1hcCgpXG4gICAgSlNPTi5wYXJzZShhU3RyaW5nLCBfanNvbl9jcmVhdGUpXG5cbiAgICBjb25zdCByZWZzPW5ldyBPYmpNYXAoKVxuICAgIEpTT04ucGFyc2UoYVN0cmluZywgX2pzb25fcmVzdG9yZSlcblxuICAgIGNvbnN0IGV2dHMgPSB7fVxuICAgIGNvbnN0IF9zdGFydCA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4gQCAoKSA9PlxuICAgICAgcXVldWUucmV2ZXJzZSgpLm1hcCBAIGVudHJ5ID0+IDo6XG4gICAgICAgIGVudHJ5LmV2dHMgPSBldnRzXG4gICAgICAgIHJldHVybiBlbnRyeS5yZXZpdmVyLnJldml2ZShlbnRyeS5vYmosIGVudHJ5LCBjdHgpXG5cbiAgICBldnRzLnN0YXJ0ZWQgPSBfc3RhcnQudGhlbiBAIGxzdCA9PiBsc3QubGVuZ3RoXG4gICAgZXZ0cy5maW5pc2hlZCA9IF9zdGFydC50aGVuIEAgbHN0ID0+XG4gICAgICBQcm9taXNlLmFsbChsc3QpLnRoZW4gQCBsc3QgPT4gbHN0Lmxlbmd0aFxuXG4gICAgZXZ0cy5kb25lID0gZXZ0cy5maW5pc2hlZC50aGVuIEAgKCkgPT4gOjpcbiAgICAgIGNvbnN0IHtvYmosIHByb21pc2V9ID0gYnlPaWQuZ2V0KDApXG4gICAgICByZXR1cm4gdW5kZWZpbmVkID09PSBwcm9taXNlID8gb2JqXG4gICAgICAgIDogcHJvbWlzZS50aGVuIEAgYW5zID0+XG4gICAgICAgICAgICBhbnMgIT09IHVuZGVmaW5lZCA/IGFucyA6IG9ialxuICAgIHJldHVybiBldnRzLmRvbmVcblxuXG4gICAgZnVuY3Rpb24gX2pzb25fY3JlYXRlKGtleSwgdmFsdWUpIDo6XG4gICAgICBpZiB0b2tlbiA9PT0ga2V5IDo6XG4gICAgICAgIGlmICdudW1iZXInID09PSB0eXBlb2YgdmFsdWUgOjpcbiAgICAgICAgZWxzZSBpZiBBcnJheS5pc0FycmF5KHZhbHVlKSA6OlxuICAgICAgICAgIGRlbGV0ZSB0aGlzW3Rva2VuXVxuXG4gICAgICAgICAgY29uc3QgW2tpbmQsIG9pZF0gPSB2YWx1ZVxuICAgICAgICAgIGNvbnN0IHJldml2ZXIgPSBsb29rdXBSZXZpdmVyKGtpbmQpXG4gICAgICAgICAgaWYgdW5kZWZpbmVkID09PSByZXZpdmVyIDo6XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmV2aXZlck5vdEZvdW5kKGBNaXNzaW5nIHJlZ2lzdGVyZWQgcmV2aXZlciBmb3Iga2luZCBcIiR7a2luZH1cImApXG5cbiAgICAgICAgICBjb25zdCBlbnRyeSA9IEA6IGtpbmQsIG9pZCwgcmV2aXZlciwgYm9keTogdGhpc1xuXG4gICAgICAgICAgZW50cnkub2JqID0gcmV2aXZlci5pbml0XG4gICAgICAgICAgICA/IHJldml2ZXIuaW5pdChlbnRyeSwgY3R4KVxuICAgICAgICAgICAgOiBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgICAgICAgICBieU9pZC5zZXQob2lkLCBlbnRyeSlcbiAgICAgICAgICBxdWV1ZS5wdXNoKGVudHJ5KVxuICAgICAgICByZXR1cm5cblxuICAgICAgcmV0dXJuIHZhbHVlXG5cblxuICAgIGZ1bmN0aW9uIF9qc29uX3Jlc3RvcmUoa2V5LCB2YWx1ZSkgOjpcbiAgICAgIGlmIHRva2VuID09PSBrZXkgOjpcbiAgICAgICAgaWYgJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSA6OlxuICAgICAgICAgIHJlZnMuc2V0IEAgdGhpcywgYnlPaWQuZ2V0KHZhbHVlKS5vYmpcblxuICAgICAgICBlbHNlIGlmIEFycmF5LmlzQXJyYXkodmFsdWUpIDo6XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBieU9pZC5nZXQodmFsdWVbMV0pXG4gICAgICAgICAgZW50cnkuYm9keSA9IHRoaXNcbiAgICAgICAgICByZWZzLnNldCBAIHRoaXMsIGVudHJ5Lm9ialxuICAgICAgICByZXR1cm5cblxuICAgICAgZWxzZSBpZiBudWxsID09PSB2YWx1ZSB8fCAnb2JqZWN0JyAhPT0gdHlwZW9mIHZhbHVlIDo6XG4gICAgICAgIHJldHVybiB2YWx1ZVxuXG4gICAgICBjb25zdCBhbnMgPSByZWZzLmdldCh2YWx1ZSlcbiAgICAgIHJldHVybiBhbnMgIT09IHVuZGVmaW5lZCA/IGFucyA6IHZhbHVlXG5cblxuICBlbmNvZGUoYW5PYmplY3QsIGN0eCkgOjpcbiAgICBjb25zdCByZWZzID0gW11cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5lbmNvZGVPYmplY3RzIEAgYW5PYmplY3QsIGN0eCwgKGVyciwgZW50cnkpID0+IDo6XG4gICAgICByZWZzW2VudHJ5Lm9pZF0gPSBlbnRyeS5jb250ZW50XG5cbiAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeSBAIGAke3RoaXMudG9rZW59cmVmc2BcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuIEAgKCkgPT5cbiAgICAgIGB7JHtrZXl9OiBbXFxuICAke3JlZnMuam9pbignLFxcbiAgJyl9IF19XFxuYFxuXG5cbiAgZW5jb2RlT2JqZWN0cyhhbk9iamVjdCwgY3R4LCBjYWxsYmFjaykgOjpcbiAgICBpZiAnZnVuY3Rpb24nID09PSB0eXBlb2YgY3R4IDo6XG4gICAgICBjYWxsYmFjayA9IGN0eDsgY3R4ID0ge31cbiAgICBlbHNlIGlmIG51bGwgPT0gY3R4IDo6XG4gICAgICBjdHggPSB7fVxuXG4gICAgY29uc3QgdG9rZW49dGhpcy50b2tlbiwgbG9va3VwUHJlc2VydmVyPXRoaXMubG9va3VwUHJlc2VydmVyLCBmaW5kUHJlc2VydmVyPXRoaXMuX2JvdW5kRmluZFByZXNlcnZlRm9yT2JqKClcblxuICAgIGNvbnN0IHF1ZXVlPVtdLCBsb29rdXA9bmV3IE1hcCgpXG4gICAgSlNPTi5zdHJpbmdpZnkoYW5PYmplY3QsIF9qc29uX3JlcGxhY2VyKVxuXG4gICAgcmV0dXJuIF9lbmNvZGVRdWV1ZSgpXG5cbiAgICBmdW5jdGlvbiBfZW5jb2RlUXVldWUoKSA6OlxuICAgICAgaWYgMCA9PT0gcXVldWUubGVuZ3RoIDo6IHJldHVyblxuXG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdXG4gICAgICB3aGlsZSAwICE9PSBxdWV1ZS5sZW5ndGggOjpcbiAgICAgICAgY29uc3QgdGlwID0gcXVldWUuc2hpZnQoKSwgb2lkID0gdGlwLm9pZFxuICAgICAgICBwcm9taXNlcy5wdXNoIEBcbiAgICAgICAgICB0aXBcbiAgICAgICAgICAgIC50aGVuIEAgYm9keSA9PiA6OlxuICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5zdHJpbmdpZnkoYm9keSwgX2pzb25fcmVwbGFjZXIpXG4gICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayBAIG51bGwsIHsgb2lkLCBib2R5LCBjb250ZW50IH1cbiAgICAgICAgICAgIC5jYXRjaCBAIGVyciA9PiBjYWxsYmFjayhlcnIpXG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihfZW5jb2RlUXVldWUpXG5cbiAgICBmdW5jdGlvbiBfanNvbl9yZXBsYWNlcihrZXksIHZhbHVlKSA6OlxuICAgICAgaWYgdmFsdWUgPT09IG51bGwgfHwgJ29iamVjdCcgIT09IHR5cGVvZiB2YWx1ZSA6OlxuICAgICAgICByZXR1cm4gdmFsdWVcblxuICAgICAgY29uc3QgcHJldiA9IGxvb2t1cC5nZXQodmFsdWUpXG4gICAgICBpZiB1bmRlZmluZWQgIT09IHByZXYgOjpcbiAgICAgICAgcmV0dXJuIHByZXYgLy8gYWxyZWFkeSBzZXJpYWxpemVkIC0tIHJlZmVyZW5jZSBleGlzdGluZyBpdGVtXG5cbiAgICAgIGxldCBlbnRyeSA9IGZpbmRQcmVzZXJ2ZXIodmFsdWUpXG4gICAgICBpZiB1bmRlZmluZWQgPT09IGVudHJ5IDo6XG4gICAgICAgIC8vIG5vdCBhIFwic3BlY2lhbFwiIHByZXNlcnZlZCBpdGVtXG4gICAgICAgIGlmIGFuT2JqZWN0ICE9PSB2YWx1ZSA6OlxuICAgICAgICAgIHJldHVybiB2YWx1ZSAvLyBzbyBzZXJpYWxpemUgbm9ybWFsbHlcbiAgICAgICAgLy8gYnV0IGl0IGlzIHRoZSByb290LCBzbyBzdG9yZSBhdCBvaWQgMFxuICAgICAgICBlbnRyeSA9IGxvb2t1cFByZXNlcnZlciBAXG4gICAgICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyByb290X2xpc3QgOiByb290X29ialxuXG4gICAgICAvLyByZWdpc3RlciBpZCBmb3Igb2JqZWN0IGFuZCByZXR1cm4gYSBKU09OIHNlcmlhbGl6YWJsZSB2ZXJzaW9uXG4gICAgICBjb25zdCBvaWQgPSBsb29rdXAuc2l6ZVxuICAgICAgY29uc3QgcmVmID0ge1t0b2tlbl06IG9pZH1cbiAgICAgIGxvb2t1cC5zZXQodmFsdWUsIHJlZilcblxuICAgICAgLy8gdHJhbnNmb3JtIGxpdmUgb2JqZWN0IGludG8gcHJlc2VydmVkIGZvcm1cbiAgICAgIGNvbnN0IGJvZHkgPSB7W3Rva2VuXTogW2VudHJ5LmtpbmQsIG9pZF19XG4gICAgICBjb25zdCBwcm9taXNlID0gUHJvbWlzZVxuICAgICAgICAucmVzb2x2ZSBAIGVudHJ5LnByZXNlcnZlID8gZW50cnkucHJlc2VydmUodmFsdWUsIGN0eCkgOiB2YWx1ZVxuICAgICAgICAudGhlbiBAIGF0dHJzID0+IE9iamVjdC5hc3NpZ24oYm9keSwgYXR0cnMpXG5cbiAgICAgIHByb21pc2Uub2lkID0gb2lkXG4gICAgICBxdWV1ZS5wdXNoIEAgcHJvbWlzZVxuICAgICAgcmV0dXJuIHJlZlxuXG4gIF9ib3VuZEZpbmRQcmVzZXJ2ZUZvck9iaigpIDo6XG4gICAgY29uc3QgbG9va3VwUHJlc2VydmVyID0gdGhpcy5sb29rdXBQcmVzZXJ2ZXJcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSA6OlxuICAgICAgbGV0IGVudHJ5ID0gbG9va3VwUHJlc2VydmVyKG9iailcbiAgICAgIGlmIHVuZGVmaW5lZCAhPT0gZW50cnkgOjpcbiAgICAgICAgcmV0dXJuIGVudHJ5XG5cbiAgICAgIGVudHJ5ID0gbG9va3VwUHJlc2VydmVyKG9iai5jb25zdHJ1Y3RvcilcbiAgICAgIGlmIHVuZGVmaW5lZCAhPT0gZW50cnkgOjpcbiAgICAgICAgcmV0dXJuIGVudHJ5XG5cbiAgICAgIGxldCBwcm90byA9IG9ialxuICAgICAgd2hpbGUgbnVsbCAhPT0gQCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgOjpcbiAgICAgICAgbGV0IGVudHJ5ID0gbG9va3VwUHJlc2VydmVyKHByb3RvKVxuICAgICAgICBpZiB1bmRlZmluZWQgIT09IGVudHJ5IDo6XG4gICAgICAgICAgcmV0dXJuIGVudHJ5XG5cblxuY2xhc3MgUmV2aXZlck5vdEZvdW5kIGV4dGVuZHMgRXJyb3IgOjpcblxuY29uc3QgY3JlYXRlUmVnaXN0cnkgPSBSZXZpdGFsaXphdGlvbi5jcmVhdGUuYmluZChSZXZpdGFsaXphdGlvbilcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gY3JlYXRlUmVnaXN0cnkoKVxuT2JqZWN0LmFzc2lnbiBAIGV4cG9ydHNcbiAgLCBAe30gUmV2aXRhbGl6YXRpb24sIFJldml2ZXJOb3RGb3VuZFxuICAgICAgLCBjcmVhdGVSZWdpc3RyeSwgY3JlYXRlOiBjcmVhdGVSZWdpc3RyeVxuIl19