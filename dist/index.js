'use strict';

const root_obj = {},
      root_list = [];
const ObjMap = 'undefined' !== typeof WeakMap ? WeakMap : Map;

class Revitalization extends Function {
  constructor() {
    throw new Error('Use the static .create() instead of new');
  }

  static create(token_p) {
    register.token = token_p || '\u039E'; // 'Îž'

    const lutRevive = new Map();
    const lutPreserve = new ObjMap();

    const self = Object.setPrototypeOf(register, this.prototype);
    Object.defineProperties(self, { lookupReviver: { value: lutRevive.get.bind(lutRevive) }, lookupPreserver: { value: lutPreserve.get.bind(lutPreserve) }, _setReviver: { value: _setReviver } });

    self.initRegistery(root_obj, root_list);
    return self;

    function register() {
      return self.register.apply(self, arguments);
    }

    function _setReviver(entry, kinds, matchers) {
      lutRevive.set(entry.kind, entry);
      return {
        alias(...kinds) {
          for (const each of kinds) {
            if (each) {
              lutRevive.set(each, entry);
            }
          }
          return this;
        }, match(...matchers) {
          for (const each of matchers) {
            if (null != each) {
              lutPreserve.set(each, entry);
            }
          }
          return this;
        } };
    }
  }

  initRegistery(root_obj, root_list) {
    this.register({ kind: '{root}',
      revive(obj, entry) {
        Object.assign(obj, entry.body);
      } }).match(root_obj);

    this.register({ kind: '[root]',
      preserve(rootList) {
        return { _: rootList.slice() };
      }, init(entry) {
        return [];
      }, revive(rootList, entry) {
        rootList.push.apply(rootList, entry.body._);
      } }).match(root_list);
  }

  register(revitalizer) {
    if ('kind' in revitalizer && revitalizer.revive) {
      return this.registerReviver(revitalizer);
    }

    let tgt;
    if (undefined !== revitalizer.prototype) {
      tgt = revitalizer.prototype[this.token];
      if (undefined !== tgt) {
        if ('function' === typeof tgt) {
          tgt = tgt.call(revitalizer.prototype, this);
          if (null == tgt) {
            return;
          }
        }
        if ('string' === typeof tgt) {
          return this.registerClass(tgt, revitalizer);
        }
      }
    }

    tgt = revitalizer[this.token];
    if (undefined !== tgt) {
      if ('function' === typeof tgt) {
        tgt = tgt.call(revitalizer, this);
        if (null == tgt) {
          return;
        }
      }
      if ('string' === typeof tgt) {
        return this.registerProto(tgt, revitalizer.prototype || revitalizer).match(revitalizer);
      }
    }

    throw new TypeError(`Unrecognized revitalization registration`);
  }

  registerReviver(entry) {
    {
      const kind = entry.kind;
      if ('string' !== typeof kind && true !== kind && false !== kind && null !== kind) {
        throw new TypeError(`"kind" must be a string`);
      }

      if (entry.init && 'function' !== typeof entry.init) {
        throw new TypeError('"init" must be a function');
      }

      if ('function' !== typeof entry.revive) {
        throw new TypeError('"revive" must be a function');
      }

      if (entry.preserve && 'function' !== typeof entry.preserve) {
        throw new TypeError('"preserve" must be a function if provided');
      }
    }

    return this._setReviver(entry);
  }

  registerClass(kind, klass) {
    return this.registerReviver({ kind,
      revive(obj, entry) {
        obj = Object.assign(obj, entry.body);
        Object.setPrototypeOf(obj, klass.prototype);
      } }).match(klass, klass.prototype);
  }

  registerProto(kind, proto) {
    return this.registerReviver({ kind,
      revive(obj, entry) {
        obj = Object.assign(obj, entry.body);
        Object.setPrototypeOf(obj, proto);
      } }).match(proto);
  }

  decode(aString, ctx) {
    if (null == ctx) {
      ctx = {};
    }
    const token = this.token,
          lookupReviver = this.lookupReviver;

    const queue = [],
          byOid = new Map();
    JSON.parse(aString, _json_create);

    const refs = new ObjMap();
    JSON.parse(aString, _json_restore);

    const done = Promise.resolve().then(() => Promise.all(queue.reverse().map(entry => {
      entry.done = done;
      const ans = entry.reviver.revive(entry.obj, entry, ctx);
      if (undefined !== ans && 0 === entry.oid) {
        return entry.promise = Promise.resolve(ans);
      }
      return ans;
    })));

    return done.then(() => {
      const { obj, promise } = byOid.get(0);
      return undefined === promise ? obj : promise.then(ans => ans !== undefined ? ans : obj);
    });

    function _json_create(key, value) {
      if (token === key) {
        if ('number' === typeof value) {} else if (Array.isArray(value)) {
          delete this[token];

          const [kind, oid] = value;
          const reviver = lookupReviver(kind);
          if (undefined === reviver) {
            throw new ReviverNotFound(`Missing registered reviver for kind "${kind}"`);
          }

          const entry = { kind, oid, reviver, body: this };

          entry.obj = reviver.init ? reviver.init(entry, ctx) : Object.create(null);

          byOid.set(oid, entry);
          queue.push(entry);
        }
        return;
      }

      return value;
    }

    function _json_restore(key, value) {
      if (token === key) {
        if ('number' === typeof value) {
          refs.set(this, byOid.get(value).obj);
        } else if (Array.isArray(value)) {
          const entry = byOid.get(value[1]);
          entry.body = this;
          refs.set(this, entry.obj);
        }
        return;
      } else if (null === value || 'object' !== typeof value) {
        return value;
      }

      const ans = refs.get(value);
      return ans !== undefined ? ans : value;
    }
  }

  encode(anObject, ctx) {
    const refs = [];
    const promise = this.encodeObjects(anObject, ctx, (err, entry) => {
      refs[entry.oid] = entry.content;
    });

    const key = JSON.stringify(`${this.token}refs`);
    return promise.then(() => `{${key}: [\n  ${refs.join(',\n  ')} ]}\n`);
  }

  encodeObjects(anObject, ctx, callback) {
    if ('function' === typeof ctx) {
      callback = ctx;ctx = {};
    } else if (null == ctx) {
      ctx = {};
    }

    const token = this.token,
          lookupPreserver = this.lookupPreserver,
          findPreserver = this._boundFindPreserveForObj();

    const queue = [],
          lookup = new Map();
    JSON.stringify(anObject, _json_replacer);

    return _encodeQueue();

    function _encodeQueue() {
      if (0 === queue.length) {
        return;
      }

      const promises = [];
      while (0 !== queue.length) {
        const tip = queue.shift(),
              oid = tip.oid;
        promises.push(tip.then(body => {
          const content = JSON.stringify(body, _json_replacer);
          return callback(null, { oid, body, content });
        }).catch(err => callback(err)));
      }

      return Promise.all(promises).then(_encodeQueue);
    }

    function _json_replacer(key, value) {
      if (value === null || 'object' !== typeof value) {
        return value;
      }

      const prev = lookup.get(value);
      if (undefined !== prev) {
        return prev; // already serialized -- reference existing item
      }let entry = findPreserver(value);
      if (undefined === entry) {
        // not a "special" preserved item
        if (anObject !== value) {
          return value; // so serialize normally
        }
        // but it is the root, so store at oid 0
        entry = lookupPreserver(Array.isArray(value) ? root_list : root_obj);
      }

      // register id for object and return a JSON serializable version
      const oid = lookup.size;
      const ref = { [token]: oid };
      lookup.set(value, ref

      // transform live object into preserved form
      );const body = { [token]: [entry.kind, oid] };
      const promise = Promise.resolve(entry.preserve ? entry.preserve(value, ctx) : value).then(attrs => Object.assign(body, attrs));

      promise.oid = oid;
      queue.push(promise);
      return ref;
    }
  }

  _boundFindPreserveForObj() {
    const lookupPreserver = this.lookupPreserver;
    return function (obj) {
      let entry = lookupPreserver(obj);
      if (undefined !== entry) {
        return entry;
      }

      entry = lookupPreserver(obj.constructor);
      if (undefined !== entry) {
        return entry;
      }

      let proto = obj;
      while (null !== (proto = Object.getPrototypeOf(proto))) {
        let entry = lookupPreserver(proto);
        if (undefined !== entry) {
          return entry;
        }
      }
    };
  }
}

class ReviverNotFound extends Error {}

const createRegistry = Revitalization.create.bind(Revitalization);

module.exports = exports = createRegistry();
Object.assign(exports, { Revitalization, ReviverNotFound,
  createRegistry, create: createRegistry });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanMiXSwibmFtZXMiOlsicm9vdF9vYmoiLCJyb290X2xpc3QiLCJPYmpNYXAiLCJXZWFrTWFwIiwiTWFwIiwiUmV2aXRhbGl6YXRpb24iLCJGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwiRXJyb3IiLCJjcmVhdGUiLCJ0b2tlbl9wIiwicmVnaXN0ZXIiLCJ0b2tlbiIsImx1dFJldml2ZSIsImx1dFByZXNlcnZlIiwic2VsZiIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiZGVmaW5lUHJvcGVydGllcyIsImxvb2t1cFJldml2ZXIiLCJ2YWx1ZSIsImdldCIsImJpbmQiLCJsb29rdXBQcmVzZXJ2ZXIiLCJfc2V0UmV2aXZlciIsImluaXRSZWdpc3RlcnkiLCJhcHBseSIsImFyZ3VtZW50cyIsImVudHJ5Iiwia2luZHMiLCJtYXRjaGVycyIsInNldCIsImtpbmQiLCJhbGlhcyIsImVhY2giLCJtYXRjaCIsInJldml2ZSIsIm9iaiIsImFzc2lnbiIsImJvZHkiLCJwcmVzZXJ2ZSIsInJvb3RMaXN0IiwiXyIsInNsaWNlIiwiaW5pdCIsInB1c2giLCJyZXZpdGFsaXplciIsInJlZ2lzdGVyUmV2aXZlciIsInRndCIsInVuZGVmaW5lZCIsImNhbGwiLCJyZWdpc3RlckNsYXNzIiwicmVnaXN0ZXJQcm90byIsIlR5cGVFcnJvciIsImtsYXNzIiwicHJvdG8iLCJkZWNvZGUiLCJhU3RyaW5nIiwiY3R4IiwicXVldWUiLCJieU9pZCIsIkpTT04iLCJwYXJzZSIsIl9qc29uX2NyZWF0ZSIsInJlZnMiLCJfanNvbl9yZXN0b3JlIiwiZG9uZSIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImFsbCIsInJldmVyc2UiLCJtYXAiLCJhbnMiLCJyZXZpdmVyIiwib2lkIiwicHJvbWlzZSIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsIlJldml2ZXJOb3RGb3VuZCIsImVuY29kZSIsImFuT2JqZWN0IiwiZW5jb2RlT2JqZWN0cyIsImVyciIsImNvbnRlbnQiLCJzdHJpbmdpZnkiLCJqb2luIiwiY2FsbGJhY2siLCJmaW5kUHJlc2VydmVyIiwiX2JvdW5kRmluZFByZXNlcnZlRm9yT2JqIiwibG9va3VwIiwiX2pzb25fcmVwbGFjZXIiLCJfZW5jb2RlUXVldWUiLCJsZW5ndGgiLCJwcm9taXNlcyIsInRpcCIsInNoaWZ0IiwiY2F0Y2giLCJwcmV2Iiwic2l6ZSIsInJlZiIsImF0dHJzIiwiZ2V0UHJvdG90eXBlT2YiLCJjcmVhdGVSZWdpc3RyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsV0FBVyxFQUFqQjtBQUFBLE1BQXFCQyxZQUFZLEVBQWpDO0FBQ0EsTUFBTUMsU0FBUyxnQkFBZ0IsT0FBT0MsT0FBdkIsR0FBaUNBLE9BQWpDLEdBQTJDQyxHQUExRDs7QUFFQSxNQUFNQyxjQUFOLFNBQTZCQyxRQUE3QixDQUFzQztBQUNwQ0MsZ0JBQWM7QUFDWixVQUFNLElBQUlDLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQTBEOztBQUU1RCxTQUFPQyxNQUFQLENBQWNDLE9BQWQsRUFBdUI7QUFDckJDLGFBQVNDLEtBQVQsR0FBaUJGLFdBQVcsUUFBNUIsQ0FEcUIsQ0FDZ0I7O0FBRXJDLFVBQU1HLFlBQVUsSUFBSVQsR0FBSixFQUFoQjtBQUNBLFVBQU1VLGNBQVksSUFBSVosTUFBSixFQUFsQjs7QUFFQSxVQUFNYSxPQUFPQyxPQUFPQyxjQUFQLENBQXNCTixRQUF0QixFQUFnQyxLQUFLTyxTQUFyQyxDQUFiO0FBQ0FGLFdBQU9HLGdCQUFQLENBQTBCSixJQUExQixFQUNFLEVBQUlLLGVBQWUsRUFBSUMsT0FBT1IsVUFBVVMsR0FBVixDQUFjQyxJQUFkLENBQW1CVixTQUFuQixDQUFYLEVBQW5CLEVBQ0lXLGlCQUFpQixFQUFJSCxPQUFPUCxZQUFZUSxHQUFaLENBQWdCQyxJQUFoQixDQUFxQlQsV0FBckIsQ0FBWCxFQURyQixFQUVJVyxhQUFhLEVBQUlKLE9BQU9JLFdBQVgsRUFGakIsRUFERjs7QUFNQVYsU0FBS1csYUFBTCxDQUFtQjFCLFFBQW5CLEVBQTZCQyxTQUE3QjtBQUNBLFdBQU9jLElBQVA7O0FBRUEsYUFBU0osUUFBVCxHQUFvQjtBQUNsQixhQUFPSSxLQUFLSixRQUFMLENBQWNnQixLQUFkLENBQW9CWixJQUFwQixFQUEwQmEsU0FBMUIsQ0FBUDtBQUEyQzs7QUFFN0MsYUFBU0gsV0FBVCxDQUFxQkksS0FBckIsRUFBNEJDLEtBQTVCLEVBQW1DQyxRQUFuQyxFQUE2QztBQUMzQ2xCLGdCQUFVbUIsR0FBVixDQUFjSCxNQUFNSSxJQUFwQixFQUEwQkosS0FBMUI7QUFDQSxhQUFPO0FBQ0hLLGNBQU0sR0FBR0osS0FBVCxFQUFnQjtBQUNkLGVBQUksTUFBTUssSUFBVixJQUFrQkwsS0FBbEIsRUFBMEI7QUFDeEIsZ0JBQUdLLElBQUgsRUFBVTtBQUFDdEIsd0JBQVVtQixHQUFWLENBQWNHLElBQWQsRUFBb0JOLEtBQXBCO0FBQTBCO0FBQUE7QUFDdkMsaUJBQU8sSUFBUDtBQUFXLFNBSlYsRUFLSE8sTUFBTSxHQUFHTCxRQUFULEVBQW1CO0FBQ2pCLGVBQUksTUFBTUksSUFBVixJQUFrQkosUUFBbEIsRUFBNkI7QUFDM0IsZ0JBQUcsUUFBUUksSUFBWCxFQUFrQjtBQUFDckIsMEJBQVlrQixHQUFaLENBQWdCRyxJQUFoQixFQUFzQk4sS0FBdEI7QUFBNEI7QUFBQTtBQUNqRCxpQkFBTyxJQUFQO0FBQVcsU0FSVixFQUFQO0FBUWlCO0FBQUE7O0FBR3JCSCxnQkFBYzFCLFFBQWQsRUFBd0JDLFNBQXhCLEVBQW1DO0FBQ2pDLFNBQ0dVLFFBREgsQ0FDYyxFQUFDc0IsTUFBTSxRQUFQO0FBQ1JJLGFBQU9DLEdBQVAsRUFBWVQsS0FBWixFQUFtQjtBQUFHYixlQUFPdUIsTUFBUCxDQUFjRCxHQUFkLEVBQW1CVCxNQUFNVyxJQUF6QjtBQUE4QixPQUQ1QyxFQURkLEVBR0dKLEtBSEgsQ0FHV3BDLFFBSFg7O0FBS0EsU0FDR1csUUFESCxDQUNjLEVBQUNzQixNQUFNLFFBQVA7QUFDUlEsZUFBU0MsUUFBVCxFQUFtQjtBQUFHLGVBQU8sRUFBSUMsR0FBR0QsU0FBU0UsS0FBVCxFQUFQLEVBQVA7QUFBOEIsT0FENUMsRUFFUkMsS0FBS2hCLEtBQUwsRUFBWTtBQUFHLGVBQU8sRUFBUDtBQUFTLE9BRmhCLEVBR1JRLE9BQU9LLFFBQVAsRUFBaUJiLEtBQWpCLEVBQXdCO0FBQ3RCYSxpQkFBU0ksSUFBVCxDQUFjbkIsS0FBZCxDQUFvQmUsUUFBcEIsRUFBOEJiLE1BQU1XLElBQU4sQ0FBV0csQ0FBekM7QUFBMkMsT0FKckMsRUFEZCxFQU1HUCxLQU5ILENBTVduQyxTQU5YO0FBTW9COztBQUV0QlUsV0FBU29DLFdBQVQsRUFBc0I7QUFDcEIsUUFBRyxVQUFVQSxXQUFWLElBQXlCQSxZQUFZVixNQUF4QyxFQUFpRDtBQUMvQyxhQUFPLEtBQUtXLGVBQUwsQ0FBcUJELFdBQXJCLENBQVA7QUFBd0M7O0FBRTFDLFFBQUlFLEdBQUo7QUFDQSxRQUFHQyxjQUFjSCxZQUFZN0IsU0FBN0IsRUFBeUM7QUFDdkMrQixZQUFNRixZQUFZN0IsU0FBWixDQUFzQixLQUFLTixLQUEzQixDQUFOO0FBQ0EsVUFBR3NDLGNBQWNELEdBQWpCLEVBQXVCO0FBQ3JCLFlBQUcsZUFBZSxPQUFPQSxHQUF6QixFQUErQjtBQUM3QkEsZ0JBQU1BLElBQUlFLElBQUosQ0FBU0osWUFBWTdCLFNBQXJCLEVBQWdDLElBQWhDLENBQU47QUFDQSxjQUFHLFFBQVErQixHQUFYLEVBQWlCO0FBQUM7QUFBTTtBQUFBO0FBQzFCLFlBQUcsYUFBYSxPQUFPQSxHQUF2QixFQUE2QjtBQUMzQixpQkFBTyxLQUFLRyxhQUFMLENBQW1CSCxHQUFuQixFQUF3QkYsV0FBeEIsQ0FBUDtBQUEyQztBQUFBO0FBQUE7O0FBRWpERSxVQUFNRixZQUFZLEtBQUtuQyxLQUFqQixDQUFOO0FBQ0EsUUFBR3NDLGNBQWNELEdBQWpCLEVBQXVCO0FBQ3JCLFVBQUcsZUFBZSxPQUFPQSxHQUF6QixFQUErQjtBQUM3QkEsY0FBTUEsSUFBSUUsSUFBSixDQUFTSixXQUFULEVBQXNCLElBQXRCLENBQU47QUFDQSxZQUFHLFFBQVFFLEdBQVgsRUFBaUI7QUFBQztBQUFNO0FBQUE7QUFDMUIsVUFBRyxhQUFhLE9BQU9BLEdBQXZCLEVBQTZCO0FBQzNCLGVBQU8sS0FBS0ksYUFBTCxDQUFtQkosR0FBbkIsRUFBd0JGLFlBQVk3QixTQUFaLElBQXlCNkIsV0FBakQsRUFDSlgsS0FESSxDQUNFVyxXQURGLENBQVA7QUFDcUI7QUFBQTs7QUFFekIsVUFBTSxJQUFJTyxTQUFKLENBQWUsMENBQWYsQ0FBTjtBQUErRDs7QUFFakVOLGtCQUFnQm5CLEtBQWhCLEVBQXVCO0FBQ3JCO0FBQ0UsWUFBTUksT0FBT0osTUFBTUksSUFBbkI7QUFDQSxVQUFHLGFBQWEsT0FBT0EsSUFBcEIsSUFBNEIsU0FBU0EsSUFBckMsSUFBNkMsVUFBVUEsSUFBdkQsSUFBK0QsU0FBU0EsSUFBM0UsRUFBa0Y7QUFDaEYsY0FBTSxJQUFJcUIsU0FBSixDQUFpQix5QkFBakIsQ0FBTjtBQUErQzs7QUFFakQsVUFBR3pCLE1BQU1nQixJQUFOLElBQWMsZUFBZSxPQUFPaEIsTUFBTWdCLElBQTdDLEVBQW9EO0FBQ2xELGNBQU0sSUFBSVMsU0FBSixDQUFnQiwyQkFBaEIsQ0FBTjtBQUFpRDs7QUFFbkQsVUFBRyxlQUFlLE9BQU96QixNQUFNUSxNQUEvQixFQUF3QztBQUN0QyxjQUFNLElBQUlpQixTQUFKLENBQWdCLDZCQUFoQixDQUFOO0FBQW1EOztBQUVyRCxVQUFHekIsTUFBTVksUUFBTixJQUFrQixlQUFlLE9BQU9aLE1BQU1ZLFFBQWpELEVBQTREO0FBQzFELGNBQU0sSUFBSWEsU0FBSixDQUFnQiwyQ0FBaEIsQ0FBTjtBQUFpRTtBQUFBOztBQUVyRSxXQUFPLEtBQUs3QixXQUFMLENBQWlCSSxLQUFqQixDQUFQO0FBQThCOztBQUVoQ3VCLGdCQUFjbkIsSUFBZCxFQUFvQnNCLEtBQXBCLEVBQTJCO0FBQ3pCLFdBQU8sS0FDSlAsZUFESSxDQUNjLEVBQUNmLElBQUQ7QUFDakJJLGFBQU9DLEdBQVAsRUFBWVQsS0FBWixFQUFtQjtBQUNqQlMsY0FBTXRCLE9BQU91QixNQUFQLENBQWNELEdBQWQsRUFBbUJULE1BQU1XLElBQXpCLENBQU47QUFDQXhCLGVBQU9DLGNBQVAsQ0FBc0JxQixHQUF0QixFQUEyQmlCLE1BQU1yQyxTQUFqQztBQUEyQyxPQUg1QixFQURkLEVBS0prQixLQUxJLENBS0VtQixLQUxGLEVBS1NBLE1BQU1yQyxTQUxmLENBQVA7QUFLZ0M7O0FBRWxDbUMsZ0JBQWNwQixJQUFkLEVBQW9CdUIsS0FBcEIsRUFBMkI7QUFDekIsV0FBTyxLQUNKUixlQURJLENBQ2MsRUFBQ2YsSUFBRDtBQUNqQkksYUFBT0MsR0FBUCxFQUFZVCxLQUFaLEVBQW1CO0FBQ2pCUyxjQUFNdEIsT0FBT3VCLE1BQVAsQ0FBY0QsR0FBZCxFQUFtQlQsTUFBTVcsSUFBekIsQ0FBTjtBQUNBeEIsZUFBT0MsY0FBUCxDQUFzQnFCLEdBQXRCLEVBQTJCa0IsS0FBM0I7QUFBaUMsT0FIbEIsRUFEZCxFQUtKcEIsS0FMSSxDQUtFb0IsS0FMRixDQUFQO0FBS2U7O0FBR2pCQyxTQUFPQyxPQUFQLEVBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixRQUFHLFFBQVFBLEdBQVgsRUFBaUI7QUFBQ0EsWUFBTSxFQUFOO0FBQVE7QUFDMUIsVUFBTS9DLFFBQU0sS0FBS0EsS0FBakI7QUFBQSxVQUF3QlEsZ0JBQWMsS0FBS0EsYUFBM0M7O0FBRUEsVUFBTXdDLFFBQU0sRUFBWjtBQUFBLFVBQWdCQyxRQUFNLElBQUl6RCxHQUFKLEVBQXRCO0FBQ0EwRCxTQUFLQyxLQUFMLENBQVdMLE9BQVgsRUFBb0JNLFlBQXBCOztBQUVBLFVBQU1DLE9BQUssSUFBSS9ELE1BQUosRUFBWDtBQUNBNEQsU0FBS0MsS0FBTCxDQUFXTCxPQUFYLEVBQW9CUSxhQUFwQjs7QUFFQSxVQUFNQyxPQUFPQyxRQUFRQyxPQUFSLEdBQ1ZDLElBRFUsQ0FDSCxNQUNORixRQUFRRyxHQUFSLENBQWNYLE1BQU1ZLE9BQU4sR0FBZ0JDLEdBQWhCLENBQXNCNUMsU0FBUztBQUMzQ0EsWUFBTXNDLElBQU4sR0FBYUEsSUFBYjtBQUNBLFlBQU1PLE1BQU03QyxNQUFNOEMsT0FBTixDQUFjdEMsTUFBZCxDQUFxQlIsTUFBTVMsR0FBM0IsRUFBZ0NULEtBQWhDLEVBQXVDOEIsR0FBdkMsQ0FBWjtBQUNBLFVBQUdULGNBQWN3QixHQUFkLElBQXFCLE1BQU03QyxNQUFNK0MsR0FBcEMsRUFBMEM7QUFDeEMsZUFBTy9DLE1BQU1nRCxPQUFOLEdBQWdCVCxRQUFRQyxPQUFSLENBQWdCSyxHQUFoQixDQUF2QjtBQUEyQztBQUM3QyxhQUFPQSxHQUFQO0FBQVUsS0FMRSxDQUFkLENBRlMsQ0FBYjs7QUFTQSxXQUFPUCxLQUFLRyxJQUFMLENBQVksTUFBTTtBQUN2QixZQUFNLEVBQUNoQyxHQUFELEVBQU11QyxPQUFOLEtBQWlCaEIsTUFBTXZDLEdBQU4sQ0FBVSxDQUFWLENBQXZCO0FBQ0EsYUFBTzRCLGNBQWMyQixPQUFkLEdBQXdCdkMsR0FBeEIsR0FDSHVDLFFBQVFQLElBQVIsQ0FBZUksT0FDYkEsUUFBUXhCLFNBQVIsR0FBb0J3QixHQUFwQixHQUEwQnBDLEdBRDVCLENBREo7QUFFbUMsS0FKOUIsQ0FBUDs7QUFPQSxhQUFTMEIsWUFBVCxDQUFzQmMsR0FBdEIsRUFBMkJ6RCxLQUEzQixFQUFrQztBQUNoQyxVQUFHVCxVQUFVa0UsR0FBYixFQUFtQjtBQUNqQixZQUFHLGFBQWEsT0FBT3pELEtBQXZCLEVBQStCLEVBQS9CLE1BQ0ssSUFBRzBELE1BQU1DLE9BQU4sQ0FBYzNELEtBQWQsQ0FBSCxFQUEwQjtBQUM3QixpQkFBTyxLQUFLVCxLQUFMLENBQVA7O0FBRUEsZ0JBQU0sQ0FBQ3FCLElBQUQsRUFBTzJDLEdBQVAsSUFBY3ZELEtBQXBCO0FBQ0EsZ0JBQU1zRCxVQUFVdkQsY0FBY2EsSUFBZCxDQUFoQjtBQUNBLGNBQUdpQixjQUFjeUIsT0FBakIsRUFBMkI7QUFDekIsa0JBQU0sSUFBSU0sZUFBSixDQUFxQix3Q0FBdUNoRCxJQUFLLEdBQWpFLENBQU47QUFBMEU7O0FBRTVFLGdCQUFNSixRQUFVLEVBQUNJLElBQUQsRUFBTzJDLEdBQVAsRUFBWUQsT0FBWixFQUFxQm5DLE1BQU0sSUFBM0IsRUFBaEI7O0FBRUFYLGdCQUFNUyxHQUFOLEdBQVlxQyxRQUFROUIsSUFBUixHQUNSOEIsUUFBUTlCLElBQVIsQ0FBYWhCLEtBQWIsRUFBb0I4QixHQUFwQixDQURRLEdBRVIzQyxPQUFPUCxNQUFQLENBQWMsSUFBZCxDQUZKOztBQUlBb0QsZ0JBQU03QixHQUFOLENBQVU0QyxHQUFWLEVBQWUvQyxLQUFmO0FBQ0ErQixnQkFBTWQsSUFBTixDQUFXakIsS0FBWDtBQUFpQjtBQUNuQjtBQUFNOztBQUVSLGFBQU9SLEtBQVA7QUFBWTs7QUFHZCxhQUFTNkMsYUFBVCxDQUF1QlksR0FBdkIsRUFBNEJ6RCxLQUE1QixFQUFtQztBQUNqQyxVQUFHVCxVQUFVa0UsR0FBYixFQUFtQjtBQUNqQixZQUFHLGFBQWEsT0FBT3pELEtBQXZCLEVBQStCO0FBQzdCNEMsZUFBS2pDLEdBQUwsQ0FBVyxJQUFYLEVBQWlCNkIsTUFBTXZDLEdBQU4sQ0FBVUQsS0FBVixFQUFpQmlCLEdBQWxDO0FBQXFDLFNBRHZDLE1BR0ssSUFBR3lDLE1BQU1DLE9BQU4sQ0FBYzNELEtBQWQsQ0FBSCxFQUEwQjtBQUM3QixnQkFBTVEsUUFBUWdDLE1BQU12QyxHQUFOLENBQVVELE1BQU0sQ0FBTixDQUFWLENBQWQ7QUFDQVEsZ0JBQU1XLElBQU4sR0FBYSxJQUFiO0FBQ0F5QixlQUFLakMsR0FBTCxDQUFXLElBQVgsRUFBaUJILE1BQU1TLEdBQXZCO0FBQTBCO0FBQzVCO0FBQU0sT0FSUixNQVVLLElBQUcsU0FBU2pCLEtBQVQsSUFBa0IsYUFBYSxPQUFPQSxLQUF6QyxFQUFpRDtBQUNwRCxlQUFPQSxLQUFQO0FBQVk7O0FBRWQsWUFBTXFELE1BQU1ULEtBQUszQyxHQUFMLENBQVNELEtBQVQsQ0FBWjtBQUNBLGFBQU9xRCxRQUFReEIsU0FBUixHQUFvQndCLEdBQXBCLEdBQTBCckQsS0FBakM7QUFBc0M7QUFBQTs7QUFHMUM2RCxTQUFPQyxRQUFQLEVBQWlCeEIsR0FBakIsRUFBc0I7QUFDcEIsVUFBTU0sT0FBTyxFQUFiO0FBQ0EsVUFBTVksVUFBVSxLQUFLTyxhQUFMLENBQXFCRCxRQUFyQixFQUErQnhCLEdBQS9CLEVBQW9DLENBQUMwQixHQUFELEVBQU14RCxLQUFOLEtBQWdCO0FBQ2xFb0MsV0FBS3BDLE1BQU0rQyxHQUFYLElBQWtCL0MsTUFBTXlELE9BQXhCO0FBQStCLEtBRGpCLENBQWhCOztBQUdBLFVBQU1SLE1BQU1oQixLQUFLeUIsU0FBTCxDQUFrQixHQUFFLEtBQUszRSxLQUFNLE1BQS9CLENBQVo7QUFDQSxXQUFPaUUsUUFBUVAsSUFBUixDQUFlLE1BQ25CLElBQUdRLEdBQUksVUFBU2IsS0FBS3VCLElBQUwsQ0FBVSxPQUFWLENBQW1CLE9BRC9CLENBQVA7QUFDNEM7O0FBRzlDSixnQkFBY0QsUUFBZCxFQUF3QnhCLEdBQXhCLEVBQTZCOEIsUUFBN0IsRUFBdUM7QUFDckMsUUFBRyxlQUFlLE9BQU85QixHQUF6QixFQUErQjtBQUM3QjhCLGlCQUFXOUIsR0FBWCxDQUFnQkEsTUFBTSxFQUFOO0FBQVEsS0FEMUIsTUFFSyxJQUFHLFFBQVFBLEdBQVgsRUFBaUI7QUFDcEJBLFlBQU0sRUFBTjtBQUFROztBQUVWLFVBQU0vQyxRQUFNLEtBQUtBLEtBQWpCO0FBQUEsVUFBd0JZLGtCQUFnQixLQUFLQSxlQUE3QztBQUFBLFVBQThEa0UsZ0JBQWMsS0FBS0Msd0JBQUwsRUFBNUU7O0FBRUEsVUFBTS9CLFFBQU0sRUFBWjtBQUFBLFVBQWdCZ0MsU0FBTyxJQUFJeEYsR0FBSixFQUF2QjtBQUNBMEQsU0FBS3lCLFNBQUwsQ0FBZUosUUFBZixFQUF5QlUsY0FBekI7O0FBRUEsV0FBT0MsY0FBUDs7QUFFQSxhQUFTQSxZQUFULEdBQXdCO0FBQ3RCLFVBQUcsTUFBTWxDLE1BQU1tQyxNQUFmLEVBQXdCO0FBQUM7QUFBTTs7QUFFL0IsWUFBTUMsV0FBVyxFQUFqQjtBQUNBLGFBQU0sTUFBTXBDLE1BQU1tQyxNQUFsQixFQUEyQjtBQUN6QixjQUFNRSxNQUFNckMsTUFBTXNDLEtBQU4sRUFBWjtBQUFBLGNBQTJCdEIsTUFBTXFCLElBQUlyQixHQUFyQztBQUNBb0IsaUJBQVNsRCxJQUFULENBQ0VtRCxJQUNHM0IsSUFESCxDQUNVOUIsUUFBUTtBQUNkLGdCQUFNOEMsVUFBVXhCLEtBQUt5QixTQUFMLENBQWUvQyxJQUFmLEVBQXFCcUQsY0FBckIsQ0FBaEI7QUFDQSxpQkFBT0osU0FBVyxJQUFYLEVBQWlCLEVBQUViLEdBQUYsRUFBT3BDLElBQVAsRUFBYThDLE9BQWIsRUFBakIsQ0FBUDtBQUE4QyxTQUhsRCxFQUlHYSxLQUpILENBSVdkLE9BQU9JLFNBQVNKLEdBQVQsQ0FKbEIsQ0FERjtBQUtpQzs7QUFFbkMsYUFBT2pCLFFBQVFHLEdBQVIsQ0FBWXlCLFFBQVosRUFBc0IxQixJQUF0QixDQUEyQndCLFlBQTNCLENBQVA7QUFBK0M7O0FBRWpELGFBQVNELGNBQVQsQ0FBd0JmLEdBQXhCLEVBQTZCekQsS0FBN0IsRUFBb0M7QUFDbEMsVUFBR0EsVUFBVSxJQUFWLElBQWtCLGFBQWEsT0FBT0EsS0FBekMsRUFBaUQ7QUFDL0MsZUFBT0EsS0FBUDtBQUFZOztBQUVkLFlBQU0rRSxPQUFPUixPQUFPdEUsR0FBUCxDQUFXRCxLQUFYLENBQWI7QUFDQSxVQUFHNkIsY0FBY2tELElBQWpCLEVBQXdCO0FBQ3RCLGVBQU9BLElBQVAsQ0FEc0IsQ0FDVjtBQUFnRCxPQUU5RCxJQUFJdkUsUUFBUTZELGNBQWNyRSxLQUFkLENBQVo7QUFDQSxVQUFHNkIsY0FBY3JCLEtBQWpCLEVBQXlCO0FBQ3ZCO0FBQ0EsWUFBR3NELGFBQWE5RCxLQUFoQixFQUF3QjtBQUN0QixpQkFBT0EsS0FBUCxDQURzQixDQUNUO0FBQXdCO0FBQ3ZDO0FBQ0FRLGdCQUFRTCxnQkFDTnVELE1BQU1DLE9BQU4sQ0FBYzNELEtBQWQsSUFBdUJwQixTQUF2QixHQUFtQ0QsUUFEN0IsQ0FBUjtBQUM2Qzs7QUFFL0M7QUFDQSxZQUFNNEUsTUFBTWdCLE9BQU9TLElBQW5CO0FBQ0EsWUFBTUMsTUFBTSxFQUFDLENBQUMxRixLQUFELEdBQVNnRSxHQUFWLEVBQVo7QUFDQWdCLGFBQU81RCxHQUFQLENBQVdYLEtBQVgsRUFBa0JpRjs7QUFFbEI7QUFGQSxRQUdBLE1BQU05RCxPQUFPLEVBQUMsQ0FBQzVCLEtBQUQsR0FBUyxDQUFDaUIsTUFBTUksSUFBUCxFQUFhMkMsR0FBYixDQUFWLEVBQWI7QUFDQSxZQUFNQyxVQUFVVCxRQUNiQyxPQURhLENBQ0h4QyxNQUFNWSxRQUFOLEdBQWlCWixNQUFNWSxRQUFOLENBQWVwQixLQUFmLEVBQXNCc0MsR0FBdEIsQ0FBakIsR0FBOEN0QyxLQUQzQyxFQUViaUQsSUFGYSxDQUVOaUMsU0FBU3ZGLE9BQU91QixNQUFQLENBQWNDLElBQWQsRUFBb0IrRCxLQUFwQixDQUZILENBQWhCOztBQUlBMUIsY0FBUUQsR0FBUixHQUFjQSxHQUFkO0FBQ0FoQixZQUFNZCxJQUFOLENBQWErQixPQUFiO0FBQ0EsYUFBT3lCLEdBQVA7QUFBVTtBQUFBOztBQUVkWCw2QkFBMkI7QUFDekIsVUFBTW5FLGtCQUFrQixLQUFLQSxlQUE3QjtBQUNBLFdBQU8sVUFBU2MsR0FBVCxFQUFjO0FBQ25CLFVBQUlULFFBQVFMLGdCQUFnQmMsR0FBaEIsQ0FBWjtBQUNBLFVBQUdZLGNBQWNyQixLQUFqQixFQUF5QjtBQUN2QixlQUFPQSxLQUFQO0FBQVk7O0FBRWRBLGNBQVFMLGdCQUFnQmMsSUFBSS9CLFdBQXBCLENBQVI7QUFDQSxVQUFHMkMsY0FBY3JCLEtBQWpCLEVBQXlCO0FBQ3ZCLGVBQU9BLEtBQVA7QUFBWTs7QUFFZCxVQUFJMkIsUUFBUWxCLEdBQVo7QUFDQSxhQUFNLFVBQVdrQixRQUFReEMsT0FBT3dGLGNBQVAsQ0FBc0JoRCxLQUF0QixDQUFuQixDQUFOLEVBQXdEO0FBQ3RELFlBQUkzQixRQUFRTCxnQkFBZ0JnQyxLQUFoQixDQUFaO0FBQ0EsWUFBR04sY0FBY3JCLEtBQWpCLEVBQXlCO0FBQ3ZCLGlCQUFPQSxLQUFQO0FBQVk7QUFBQTtBQUFBLEtBYmxCO0FBYWtCO0FBdFFnQjs7QUF5UXRDLE1BQU1vRCxlQUFOLFNBQThCekUsS0FBOUIsQ0FBb0M7O0FBRXBDLE1BQU1pRyxpQkFBaUJwRyxlQUFlSSxNQUFmLENBQXNCYyxJQUF0QixDQUEyQmxCLGNBQTNCLENBQXZCOztBQUVBcUcsT0FBT0MsT0FBUCxHQUFpQkEsVUFBVUYsZ0JBQTNCO0FBQ0F6RixPQUFPdUIsTUFBUCxDQUFnQm9FLE9BQWhCLEVBQ0ksRUFBSXRHLGNBQUosRUFBb0I0RSxlQUFwQjtBQUNJd0IsZ0JBREosRUFDb0JoRyxRQUFRZ0csY0FENUIsRUFESiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJvb3Rfb2JqID0ge30sIHJvb3RfbGlzdCA9IFtdXG5jb25zdCBPYmpNYXAgPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFdlYWtNYXAgPyBXZWFrTWFwIDogTWFwXG5cbmNsYXNzIFJldml0YWxpemF0aW9uIGV4dGVuZHMgRnVuY3Rpb24gOjpcbiAgY29uc3RydWN0b3IoKSA6OlxuICAgIHRocm93IG5ldyBFcnJvcignVXNlIHRoZSBzdGF0aWMgLmNyZWF0ZSgpIGluc3RlYWQgb2YgbmV3JylcblxuICBzdGF0aWMgY3JlYXRlKHRva2VuX3ApIDo6XG4gICAgcmVnaXN0ZXIudG9rZW4gPSB0b2tlbl9wIHx8ICdcXHUwMzlFJyAvLyAnzp4nXG5cbiAgICBjb25zdCBsdXRSZXZpdmU9bmV3IE1hcCgpXG4gICAgY29uc3QgbHV0UHJlc2VydmU9bmV3IE9iak1hcCgpXG5cbiAgICBjb25zdCBzZWxmID0gT2JqZWN0LnNldFByb3RvdHlwZU9mKHJlZ2lzdGVyLCB0aGlzLnByb3RvdHlwZSlcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyBAIHNlbGYsXG4gICAgICBAe30gbG9va3VwUmV2aXZlcjogQHt9IHZhbHVlOiBsdXRSZXZpdmUuZ2V0LmJpbmQobHV0UmV2aXZlKVxuICAgICAgICAsIGxvb2t1cFByZXNlcnZlcjogQHt9IHZhbHVlOiBsdXRQcmVzZXJ2ZS5nZXQuYmluZChsdXRQcmVzZXJ2ZSlcbiAgICAgICAgLCBfc2V0UmV2aXZlcjogQHt9IHZhbHVlOiBfc2V0UmV2aXZlclxuXG5cbiAgICBzZWxmLmluaXRSZWdpc3Rlcnkocm9vdF9vYmosIHJvb3RfbGlzdClcbiAgICByZXR1cm4gc2VsZlxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoKSA6OlxuICAgICAgcmV0dXJuIHNlbGYucmVnaXN0ZXIuYXBwbHkoc2VsZiwgYXJndW1lbnRzKVxuXG4gICAgZnVuY3Rpb24gX3NldFJldml2ZXIoZW50cnksIGtpbmRzLCBtYXRjaGVycykgOjpcbiAgICAgIGx1dFJldml2ZS5zZXQoZW50cnkua2luZCwgZW50cnkpXG4gICAgICByZXR1cm4gOjpcbiAgICAgICAgICBhbGlhcyguLi5raW5kcykgOjpcbiAgICAgICAgICAgIGZvciBjb25zdCBlYWNoIG9mIGtpbmRzIDo6XG4gICAgICAgICAgICAgIGlmIGVhY2ggOjogbHV0UmV2aXZlLnNldChlYWNoLCBlbnRyeSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgICwgbWF0Y2goLi4ubWF0Y2hlcnMpIDo6XG4gICAgICAgICAgICBmb3IgY29uc3QgZWFjaCBvZiBtYXRjaGVycyA6OlxuICAgICAgICAgICAgICBpZiBudWxsICE9IGVhY2ggOjogbHV0UHJlc2VydmUuc2V0KGVhY2gsIGVudHJ5KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcblxuXG4gIGluaXRSZWdpc3Rlcnkocm9vdF9vYmosIHJvb3RfbGlzdCkgOjpcbiAgICB0aGlzXG4gICAgICAucmVnaXN0ZXIgQDoga2luZDogJ3tyb290fSdcbiAgICAgICAgLCByZXZpdmUob2JqLCBlbnRyeSkgOjogT2JqZWN0LmFzc2lnbihvYmosIGVudHJ5LmJvZHkpXG4gICAgICAubWF0Y2ggQCByb290X29ialxuXG4gICAgdGhpc1xuICAgICAgLnJlZ2lzdGVyIEA6IGtpbmQ6ICdbcm9vdF0nXG4gICAgICAgICwgcHJlc2VydmUocm9vdExpc3QpIDo6IHJldHVybiBAe30gXzogcm9vdExpc3Quc2xpY2UoKVxuICAgICAgICAsIGluaXQoZW50cnkpIDo6IHJldHVybiBbXVxuICAgICAgICAsIHJldml2ZShyb290TGlzdCwgZW50cnkpIDo6XG4gICAgICAgICAgICByb290TGlzdC5wdXNoLmFwcGx5KHJvb3RMaXN0LCBlbnRyeS5ib2R5Ll8pXG4gICAgICAubWF0Y2ggQCByb290X2xpc3RcblxuICByZWdpc3RlcihyZXZpdGFsaXplcikgOjpcbiAgICBpZiAna2luZCcgaW4gcmV2aXRhbGl6ZXIgJiYgcmV2aXRhbGl6ZXIucmV2aXZlIDo6XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RlclJldml2ZXIocmV2aXRhbGl6ZXIpXG5cbiAgICBsZXQgdGd0XG4gICAgaWYgdW5kZWZpbmVkICE9PSByZXZpdGFsaXplci5wcm90b3R5cGUgOjpcbiAgICAgIHRndCA9IHJldml0YWxpemVyLnByb3RvdHlwZVt0aGlzLnRva2VuXVxuICAgICAgaWYgdW5kZWZpbmVkICE9PSB0Z3QgOjpcbiAgICAgICAgaWYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHRndCA6OlxuICAgICAgICAgIHRndCA9IHRndC5jYWxsKHJldml0YWxpemVyLnByb3RvdHlwZSwgdGhpcylcbiAgICAgICAgICBpZiBudWxsID09IHRndCA6OiByZXR1cm5cbiAgICAgICAgaWYgJ3N0cmluZycgPT09IHR5cGVvZiB0Z3QgOjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlckNsYXNzKHRndCwgcmV2aXRhbGl6ZXIpXG5cbiAgICB0Z3QgPSByZXZpdGFsaXplclt0aGlzLnRva2VuXVxuICAgIGlmIHVuZGVmaW5lZCAhPT0gdGd0IDo6XG4gICAgICBpZiAnZnVuY3Rpb24nID09PSB0eXBlb2YgdGd0IDo6XG4gICAgICAgIHRndCA9IHRndC5jYWxsKHJldml0YWxpemVyLCB0aGlzKVxuICAgICAgICBpZiBudWxsID09IHRndCA6OiByZXR1cm5cbiAgICAgIGlmICdzdHJpbmcnID09PSB0eXBlb2YgdGd0IDo6XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyUHJvdG8odGd0LCByZXZpdGFsaXplci5wcm90b3R5cGUgfHwgcmV2aXRhbGl6ZXIpXG4gICAgICAgICAgLm1hdGNoKHJldml0YWxpemVyKVxuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5yZWNvZ25pemVkIHJldml0YWxpemF0aW9uIHJlZ2lzdHJhdGlvbmApXG5cbiAgcmVnaXN0ZXJSZXZpdmVyKGVudHJ5KSA6OlxuICAgIDo6XG4gICAgICBjb25zdCBraW5kID0gZW50cnkua2luZFxuICAgICAgaWYgJ3N0cmluZycgIT09IHR5cGVvZiBraW5kICYmIHRydWUgIT09IGtpbmQgJiYgZmFsc2UgIT09IGtpbmQgJiYgbnVsbCAhPT0ga2luZCA6OlxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yIEAgYFwia2luZFwiIG11c3QgYmUgYSBzdHJpbmdgXG5cbiAgICAgIGlmIGVudHJ5LmluaXQgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGVudHJ5LmluaXQgOjpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciBAICdcImluaXRcIiBtdXN0IGJlIGEgZnVuY3Rpb24nXG5cbiAgICAgIGlmICdmdW5jdGlvbicgIT09IHR5cGVvZiBlbnRyeS5yZXZpdmUgOjpcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvciBAICdcInJldml2ZVwiIG11c3QgYmUgYSBmdW5jdGlvbidcblxuICAgICAgaWYgZW50cnkucHJlc2VydmUgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGVudHJ5LnByZXNlcnZlIDo6XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IgQCAnXCJwcmVzZXJ2ZVwiIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBwcm92aWRlZCdcblxuICAgIHJldHVybiB0aGlzLl9zZXRSZXZpdmVyKGVudHJ5KVxuXG4gIHJlZ2lzdGVyQ2xhc3Moa2luZCwga2xhc3MpIDo6XG4gICAgcmV0dXJuIHRoaXNcbiAgICAgIC5yZWdpc3RlclJldml2ZXIgQDoga2luZCxcbiAgICAgICAgcmV2aXZlKG9iaiwgZW50cnkpIDo6XG4gICAgICAgICAgb2JqID0gT2JqZWN0LmFzc2lnbihvYmosIGVudHJ5LmJvZHkpXG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKG9iaiwga2xhc3MucHJvdG90eXBlKVxuICAgICAgLm1hdGNoKGtsYXNzLCBrbGFzcy5wcm90b3R5cGUpXG5cbiAgcmVnaXN0ZXJQcm90byhraW5kLCBwcm90bykgOjpcbiAgICByZXR1cm4gdGhpc1xuICAgICAgLnJlZ2lzdGVyUmV2aXZlciBAOiBraW5kLFxuICAgICAgICByZXZpdmUob2JqLCBlbnRyeSkgOjpcbiAgICAgICAgICBvYmogPSBPYmplY3QuYXNzaWduKG9iaiwgZW50cnkuYm9keSlcbiAgICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBwcm90bylcbiAgICAgIC5tYXRjaChwcm90bylcblxuXG4gIGRlY29kZShhU3RyaW5nLCBjdHgpIDo6XG4gICAgaWYgbnVsbCA9PSBjdHggOjogY3R4ID0ge31cbiAgICBjb25zdCB0b2tlbj10aGlzLnRva2VuLCBsb29rdXBSZXZpdmVyPXRoaXMubG9va3VwUmV2aXZlclxuXG4gICAgY29uc3QgcXVldWU9W10sIGJ5T2lkPW5ldyBNYXAoKVxuICAgIEpTT04ucGFyc2UoYVN0cmluZywgX2pzb25fY3JlYXRlKVxuXG4gICAgY29uc3QgcmVmcz1uZXcgT2JqTWFwKClcbiAgICBKU09OLnBhcnNlKGFTdHJpbmcsIF9qc29uX3Jlc3RvcmUpXG5cbiAgICBjb25zdCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuIEAgKCkgPT5cbiAgICAgICAgUHJvbWlzZS5hbGwgQCBxdWV1ZS5yZXZlcnNlKCkubWFwIEAgZW50cnkgPT4gOjpcbiAgICAgICAgICBlbnRyeS5kb25lID0gZG9uZVxuICAgICAgICAgIGNvbnN0IGFucyA9IGVudHJ5LnJldml2ZXIucmV2aXZlKGVudHJ5Lm9iaiwgZW50cnksIGN0eClcbiAgICAgICAgICBpZiB1bmRlZmluZWQgIT09IGFucyAmJiAwID09PSBlbnRyeS5vaWQgOjpcbiAgICAgICAgICAgIHJldHVybiBlbnRyeS5wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGFucylcbiAgICAgICAgICByZXR1cm4gYW5zXG5cbiAgICByZXR1cm4gZG9uZS50aGVuIEAgKCkgPT4gOjpcbiAgICAgIGNvbnN0IHtvYmosIHByb21pc2V9ID0gYnlPaWQuZ2V0KDApXG4gICAgICByZXR1cm4gdW5kZWZpbmVkID09PSBwcm9taXNlID8gb2JqXG4gICAgICAgIDogcHJvbWlzZS50aGVuIEAgYW5zID0+XG4gICAgICAgICAgICBhbnMgIT09IHVuZGVmaW5lZCA/IGFucyA6IG9ialxuXG5cbiAgICBmdW5jdGlvbiBfanNvbl9jcmVhdGUoa2V5LCB2YWx1ZSkgOjpcbiAgICAgIGlmIHRva2VuID09PSBrZXkgOjpcbiAgICAgICAgaWYgJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSA6OlxuICAgICAgICBlbHNlIGlmIEFycmF5LmlzQXJyYXkodmFsdWUpIDo6XG4gICAgICAgICAgZGVsZXRlIHRoaXNbdG9rZW5dXG5cbiAgICAgICAgICBjb25zdCBba2luZCwgb2lkXSA9IHZhbHVlXG4gICAgICAgICAgY29uc3QgcmV2aXZlciA9IGxvb2t1cFJldml2ZXIoa2luZClcbiAgICAgICAgICBpZiB1bmRlZmluZWQgPT09IHJldml2ZXIgOjpcbiAgICAgICAgICAgIHRocm93IG5ldyBSZXZpdmVyTm90Rm91bmQoYE1pc3NpbmcgcmVnaXN0ZXJlZCByZXZpdmVyIGZvciBraW5kIFwiJHtraW5kfVwiYClcblxuICAgICAgICAgIGNvbnN0IGVudHJ5ID0gQDoga2luZCwgb2lkLCByZXZpdmVyLCBib2R5OiB0aGlzXG5cbiAgICAgICAgICBlbnRyeS5vYmogPSByZXZpdmVyLmluaXRcbiAgICAgICAgICAgID8gcmV2aXZlci5pbml0KGVudHJ5LCBjdHgpXG4gICAgICAgICAgICA6IE9iamVjdC5jcmVhdGUobnVsbClcblxuICAgICAgICAgIGJ5T2lkLnNldChvaWQsIGVudHJ5KVxuICAgICAgICAgIHF1ZXVlLnB1c2goZW50cnkpXG4gICAgICAgIHJldHVyblxuXG4gICAgICByZXR1cm4gdmFsdWVcblxuXG4gICAgZnVuY3Rpb24gX2pzb25fcmVzdG9yZShrZXksIHZhbHVlKSA6OlxuICAgICAgaWYgdG9rZW4gPT09IGtleSA6OlxuICAgICAgICBpZiAnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbHVlIDo6XG4gICAgICAgICAgcmVmcy5zZXQgQCB0aGlzLCBieU9pZC5nZXQodmFsdWUpLm9ialxuXG4gICAgICAgIGVsc2UgaWYgQXJyYXkuaXNBcnJheSh2YWx1ZSkgOjpcbiAgICAgICAgICBjb25zdCBlbnRyeSA9IGJ5T2lkLmdldCh2YWx1ZVsxXSlcbiAgICAgICAgICBlbnRyeS5ib2R5ID0gdGhpc1xuICAgICAgICAgIHJlZnMuc2V0IEAgdGhpcywgZW50cnkub2JqXG4gICAgICAgIHJldHVyblxuXG4gICAgICBlbHNlIGlmIG51bGwgPT09IHZhbHVlIHx8ICdvYmplY3QnICE9PSB0eXBlb2YgdmFsdWUgOjpcbiAgICAgICAgcmV0dXJuIHZhbHVlXG5cbiAgICAgIGNvbnN0IGFucyA9IHJlZnMuZ2V0KHZhbHVlKVxuICAgICAgcmV0dXJuIGFucyAhPT0gdW5kZWZpbmVkID8gYW5zIDogdmFsdWVcblxuXG4gIGVuY29kZShhbk9iamVjdCwgY3R4KSA6OlxuICAgIGNvbnN0IHJlZnMgPSBbXVxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLmVuY29kZU9iamVjdHMgQCBhbk9iamVjdCwgY3R4LCAoZXJyLCBlbnRyeSkgPT4gOjpcbiAgICAgIHJlZnNbZW50cnkub2lkXSA9IGVudHJ5LmNvbnRlbnRcblxuICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5IEAgYCR7dGhpcy50b2tlbn1yZWZzYFxuICAgIHJldHVybiBwcm9taXNlLnRoZW4gQCAoKSA9PlxuICAgICAgYHske2tleX06IFtcXG4gICR7cmVmcy5qb2luKCcsXFxuICAnKX0gXX1cXG5gXG5cblxuICBlbmNvZGVPYmplY3RzKGFuT2JqZWN0LCBjdHgsIGNhbGxiYWNrKSA6OlxuICAgIGlmICdmdW5jdGlvbicgPT09IHR5cGVvZiBjdHggOjpcbiAgICAgIGNhbGxiYWNrID0gY3R4OyBjdHggPSB7fVxuICAgIGVsc2UgaWYgbnVsbCA9PSBjdHggOjpcbiAgICAgIGN0eCA9IHt9XG5cbiAgICBjb25zdCB0b2tlbj10aGlzLnRva2VuLCBsb29rdXBQcmVzZXJ2ZXI9dGhpcy5sb29rdXBQcmVzZXJ2ZXIsIGZpbmRQcmVzZXJ2ZXI9dGhpcy5fYm91bmRGaW5kUHJlc2VydmVGb3JPYmooKVxuXG4gICAgY29uc3QgcXVldWU9W10sIGxvb2t1cD1uZXcgTWFwKClcbiAgICBKU09OLnN0cmluZ2lmeShhbk9iamVjdCwgX2pzb25fcmVwbGFjZXIpXG5cbiAgICByZXR1cm4gX2VuY29kZVF1ZXVlKClcblxuICAgIGZ1bmN0aW9uIF9lbmNvZGVRdWV1ZSgpIDo6XG4gICAgICBpZiAwID09PSBxdWV1ZS5sZW5ndGggOjogcmV0dXJuXG5cbiAgICAgIGNvbnN0IHByb21pc2VzID0gW11cbiAgICAgIHdoaWxlIDAgIT09IHF1ZXVlLmxlbmd0aCA6OlxuICAgICAgICBjb25zdCB0aXAgPSBxdWV1ZS5zaGlmdCgpLCBvaWQgPSB0aXAub2lkXG4gICAgICAgIHByb21pc2VzLnB1c2ggQFxuICAgICAgICAgIHRpcFxuICAgICAgICAgICAgLnRoZW4gQCBib2R5ID0+IDo6XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShib2R5LCBfanNvbl9yZXBsYWNlcilcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrIEAgbnVsbCwgeyBvaWQsIGJvZHksIGNvbnRlbnQgfVxuICAgICAgICAgICAgLmNhdGNoIEAgZXJyID0+IGNhbGxiYWNrKGVycilcblxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKF9lbmNvZGVRdWV1ZSlcblxuICAgIGZ1bmN0aW9uIF9qc29uX3JlcGxhY2VyKGtleSwgdmFsdWUpIDo6XG4gICAgICBpZiB2YWx1ZSA9PT0gbnVsbCB8fCAnb2JqZWN0JyAhPT0gdHlwZW9mIHZhbHVlIDo6XG4gICAgICAgIHJldHVybiB2YWx1ZVxuXG4gICAgICBjb25zdCBwcmV2ID0gbG9va3VwLmdldCh2YWx1ZSlcbiAgICAgIGlmIHVuZGVmaW5lZCAhPT0gcHJldiA6OlxuICAgICAgICByZXR1cm4gcHJldiAvLyBhbHJlYWR5IHNlcmlhbGl6ZWQgLS0gcmVmZXJlbmNlIGV4aXN0aW5nIGl0ZW1cblxuICAgICAgbGV0IGVudHJ5ID0gZmluZFByZXNlcnZlcih2YWx1ZSlcbiAgICAgIGlmIHVuZGVmaW5lZCA9PT0gZW50cnkgOjpcbiAgICAgICAgLy8gbm90IGEgXCJzcGVjaWFsXCIgcHJlc2VydmVkIGl0ZW1cbiAgICAgICAgaWYgYW5PYmplY3QgIT09IHZhbHVlIDo6XG4gICAgICAgICAgcmV0dXJuIHZhbHVlIC8vIHNvIHNlcmlhbGl6ZSBub3JtYWxseVxuICAgICAgICAvLyBidXQgaXQgaXMgdGhlIHJvb3QsIHNvIHN0b3JlIGF0IG9pZCAwXG4gICAgICAgIGVudHJ5ID0gbG9va3VwUHJlc2VydmVyIEBcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHJvb3RfbGlzdCA6IHJvb3Rfb2JqXG5cbiAgICAgIC8vIHJlZ2lzdGVyIGlkIGZvciBvYmplY3QgYW5kIHJldHVybiBhIEpTT04gc2VyaWFsaXphYmxlIHZlcnNpb25cbiAgICAgIGNvbnN0IG9pZCA9IGxvb2t1cC5zaXplXG4gICAgICBjb25zdCByZWYgPSB7W3Rva2VuXTogb2lkfVxuICAgICAgbG9va3VwLnNldCh2YWx1ZSwgcmVmKVxuXG4gICAgICAvLyB0cmFuc2Zvcm0gbGl2ZSBvYmplY3QgaW50byBwcmVzZXJ2ZWQgZm9ybVxuICAgICAgY29uc3QgYm9keSA9IHtbdG9rZW5dOiBbZW50cnkua2luZCwgb2lkXX1cbiAgICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlXG4gICAgICAgIC5yZXNvbHZlIEAgZW50cnkucHJlc2VydmUgPyBlbnRyeS5wcmVzZXJ2ZSh2YWx1ZSwgY3R4KSA6IHZhbHVlXG4gICAgICAgIC50aGVuIEAgYXR0cnMgPT4gT2JqZWN0LmFzc2lnbihib2R5LCBhdHRycylcblxuICAgICAgcHJvbWlzZS5vaWQgPSBvaWRcbiAgICAgIHF1ZXVlLnB1c2ggQCBwcm9taXNlXG4gICAgICByZXR1cm4gcmVmXG5cbiAgX2JvdW5kRmluZFByZXNlcnZlRm9yT2JqKCkgOjpcbiAgICBjb25zdCBsb29rdXBQcmVzZXJ2ZXIgPSB0aGlzLmxvb2t1cFByZXNlcnZlclxuICAgIHJldHVybiBmdW5jdGlvbihvYmopIDo6XG4gICAgICBsZXQgZW50cnkgPSBsb29rdXBQcmVzZXJ2ZXIob2JqKVxuICAgICAgaWYgdW5kZWZpbmVkICE9PSBlbnRyeSA6OlxuICAgICAgICByZXR1cm4gZW50cnlcblxuICAgICAgZW50cnkgPSBsb29rdXBQcmVzZXJ2ZXIob2JqLmNvbnN0cnVjdG9yKVxuICAgICAgaWYgdW5kZWZpbmVkICE9PSBlbnRyeSA6OlxuICAgICAgICByZXR1cm4gZW50cnlcblxuICAgICAgbGV0IHByb3RvID0gb2JqXG4gICAgICB3aGlsZSBudWxsICE9PSBAIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSA6OlxuICAgICAgICBsZXQgZW50cnkgPSBsb29rdXBQcmVzZXJ2ZXIocHJvdG8pXG4gICAgICAgIGlmIHVuZGVmaW5lZCAhPT0gZW50cnkgOjpcbiAgICAgICAgICByZXR1cm4gZW50cnlcblxuXG5jbGFzcyBSZXZpdmVyTm90Rm91bmQgZXh0ZW5kcyBFcnJvciA6OlxuXG5jb25zdCBjcmVhdGVSZWdpc3RyeSA9IFJldml0YWxpemF0aW9uLmNyZWF0ZS5iaW5kKFJldml0YWxpemF0aW9uKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBjcmVhdGVSZWdpc3RyeSgpXG5PYmplY3QuYXNzaWduIEAgZXhwb3J0c1xuICAsIEB7fSBSZXZpdGFsaXphdGlvbiwgUmV2aXZlck5vdEZvdW5kXG4gICAgICAsIGNyZWF0ZVJlZ2lzdHJ5LCBjcmVhdGU6IGNyZWF0ZVJlZ2lzdHJ5XG4iXX0=