{"version":3,"sources":["../code/encode.js","../code/decode.js","../code/index.js"],"names":[],"mappings":"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","file":"index.min.js","sourcesContent":["export const root_obj = {}\nexport const root_list = []\n\nexport default encodeObjectTree\nexport function encodeObjectTree(reviver, anObject, ctx, cb_addObject) ::\n  const token=reviver.token\n  const lookupPreserver=reviver.lookupPreserver\n  const findPreserver=reviver._boundFindPreserveForObj()\n\n  const queue=[], lookup=new Map()\n  JSON.stringify(anObject, _json_replacer)\n\n  return _encodeQueue()\n\n  function _encodeQueue() ::\n    if 0 === queue.length ::\n      return Promise.resolve()\n\n    const promises = []\n    while 0 !== queue.length ::\n      const tip = queue.shift(), oid = tip.oid\n      promises.push @\n        tip\n          .then @\n              body => ::\n                try ::\n                  var content = JSON.stringify(body, _json_replacer)\n                catch err ::\n                  return cb_addObject(err)\n                return cb_addObject @ null, { oid, body, content }\n\n            , err => cb_addObject(err)\n\n    return Promise.all(promises).then(_encodeQueue)\n\n  function _json_replacer(key, dstValue) ::\n    // srcValue !== dstValue for objects with .toJSON() methods\n    const srcValue = this[key]\n\n    if dstValue === null || 'object' !== typeof srcValue ::\n      return dstValue\n\n    const prev = lookup.get(srcValue)\n    if undefined !== prev ::\n      return prev // already serialized -- reference existing item\n\n    let entry = findPreserver(srcValue)\n    if undefined === entry ::\n      // not a \"special\" preserved item\n      if anObject !== srcValue ::\n        return dstValue // so serialize normally\n      // but it is the root, so store at oid 0\n      entry = lookupPreserver @\n        Array.isArray(dstValue) ? root_list : root_obj\n\n    // register id for object and return a JSON serializable version\n    const oid = lookup.size\n    const ref = {[token]: oid}\n    lookup.set(srcValue, ref)\n\n    // transform live object into preserved form\n    const body = {[token]: [entry.kind, oid]}\n    const promise = Promise\n      .resolve @ entry.preserve ? entry.preserve(dstValue, srcValue, ctx) : dstValue\n      .then @ attrs => Object.assign(body, attrs)\n\n    promise.oid = oid\n    queue.push @ promise\n    return ref\n\n","export const ObjMap = 'undefined' !== typeof WeakMap ? WeakMap : Map\n\nexport default decodeObjectTree\nexport function decodeObjectTree(reviver, json_source, ctx) ::\n  if null === json_source ::\n    return null // JSON.parse(null) returns null; keep with convention\n\n  const token=reviver.token\n  const lookupReviver=reviver.lookupReviver\n\n  const queue=[], byOid=new Map()\n  JSON.parse(json_source, _json_create)\n\n  const refs=new ObjMap()\n  JSON.parse(json_source, _json_restore)\n\n  const evts = {}\n  const _start = Promise.resolve().then @ () =>\n    queue.reverse().map @ entry => ::\n      entry.evts = evts\n      return entry.reviver.revive(entry.obj, entry, ctx)\n\n  evts.started = _start.then @ lst => lst.length\n  evts.finished = _start.then @ lst =>\n    Promise.all(lst).then @ lst => lst.length\n\n  evts.done = evts.finished.then @ () => ::\n    const root = byOid.get(0)\n    if null == root :: return\n\n    const {obj, promise} = root\n    return undefined === promise ? obj\n      : promise.then @ ans =>\n          ans !== undefined ? ans : obj\n\n  return evts\n\n\n  function _json_create(key, value) ::\n    if token === key ::\n      if 'number' === typeof value ::\n      else if Array.isArray(value) ::\n        delete this[token]\n\n        const [kind, oid] = value\n        const reviver = lookupReviver(kind)\n        if undefined === reviver ::\n          throw new ReviverNotFound(`Missing registered reviver for kind \"${kind}\"`)\n\n        const entry = @: kind, oid, reviver, body: this\n\n        entry.obj = reviver.init\n          ? reviver.init(entry, ctx)\n          : Object.create(null)\n\n        byOid.set(oid, entry)\n        queue.push(entry)\n      return\n\n    return value\n\n\n  function _json_restore(key, value) ::\n    if token === key ::\n      if 'number' === typeof value ::\n        refs.set @ this, byOid.get(value).obj\n\n      else if Array.isArray(value) ::\n        const entry = byOid.get(value[1])\n        entry.body = this\n        refs.set @ this, entry.obj\n      return\n\n    else if null === value || 'object' !== typeof value ::\n      return value\n\n    const ans = refs.get(value)\n    return ans !== undefined ? ans : value\n\n","/* The following inlined by package.json build script:\n\nimport {decodeObjectTree, ObjMap} from './decode'\nimport {encodeObjectTree, root_obj, root_list} from './encode'\n*/\n\nclass Revitalization extends Function ::\n  constructor() ::\n    throw new Error('Use the static .create() instead of new')\n\n  static create(token_p) ::\n    register.token = token_p || '\\u039E' // 'Ξ'\n\n    const lutRevive=new Map()\n    const lutPreserve=new ObjMap()\n\n    const self = Object.setPrototypeOf(register, this.prototype)\n    Object.defineProperties @ self,\n      @{} lookupReviver: @{} value: lutRevive.get.bind(lutRevive)\n        , lookupPreserver: @{} value: lutPreserve.get.bind(lutPreserve)\n        , _setReviver: @{} value: _setReviver\n\n\n    self.initRegistery(root_obj, root_list)\n    return self\n\n    function register() ::\n      return self.register.apply(self, arguments)\n\n    function _setReviver(entry, kinds, matchers) ::\n      lutRevive.set(entry.kind, entry)\n      return ::\n          alias(...kinds) ::\n            for const each of kinds ::\n              if each :: lutRevive.set(each, entry)\n            return this\n        , match(...matchers) ::\n            for const each of matchers ::\n              if null != each :: lutPreserve.set(each, entry)\n            return this\n\n\n  initRegistery(root_obj, root_list) ::\n    this\n      .register @: kind: '{root}'\n        , revive(obj, entry) :: Object.assign(obj, entry.body)\n      .match @ root_obj\n\n    this\n      .register @: kind: '[root]'\n        , preserve(rootList) :: return @{} _: rootList.slice()\n        , init(entry) :: return []\n        , revive(rootList, entry) ::\n            rootList.push.apply(rootList, entry.body._)\n      .match @ root_list\n\n  register(revitalizer) ::\n    if 'kind' in revitalizer && revitalizer.revive ::\n      return this.registerReviver(revitalizer)\n\n    let tgt\n    if undefined !== revitalizer.prototype ::\n      tgt = revitalizer.prototype[this.token]\n      if undefined !== tgt ::\n        if 'function' === typeof tgt ::\n          tgt = tgt.call(revitalizer.prototype, this)\n          if null == tgt :: return\n        if 'string' === typeof tgt ::\n          return this.registerClass(tgt, revitalizer)\n\n    tgt = revitalizer[this.token]\n    if undefined !== tgt ::\n      if 'function' === typeof tgt ::\n        tgt = tgt.call(revitalizer, this)\n        if null == tgt :: return\n      if 'string' === typeof tgt ::\n        return this.registerProto(tgt, revitalizer.prototype || revitalizer)\n          .match(revitalizer)\n\n    throw new TypeError(`Unrecognized revitalization registration`)\n\n  registerReviver(entry) ::\n    ::\n      const kind = entry.kind\n      if 'string' !== typeof kind && true !== kind && false !== kind && null !== kind ::\n        throw new TypeError @ `\"kind\" must be a string`\n\n      if entry.init && 'function' !== typeof entry.init ::\n        throw new TypeError @ '\"init\" must be a function'\n\n      if 'function' !== typeof entry.revive ::\n        throw new TypeError @ '\"revive\" must be a function'\n\n      if entry.preserve && 'function' !== typeof entry.preserve ::\n        throw new TypeError @ '\"preserve\" must be a function if provided'\n\n    return this._setReviver(entry)\n\n  registerClass(kind, klass) ::\n    return this\n      .registerReviver @: kind,\n        revive(obj, entry) ::\n          obj = Object.assign(obj, entry.body)\n          Object.setPrototypeOf(obj, klass.prototype)\n      .match(klass, klass.prototype)\n\n  registerProto(kind, proto) ::\n    return this\n      .registerReviver @: kind,\n        revive(obj, entry) ::\n          obj = Object.assign(obj, entry.body)\n          Object.setPrototypeOf(obj, proto)\n      .match(proto)\n\n\n  decode(json_source, ctx) ::\n    if null === json_source ::\n      return null // JSON.parse(null) returns null; keep with convention\n\n    const evts = decodeObjectTree @ this, json_source, ctx\n    return evts.done\n\n  encode(anObject, ctx) ::\n    const refs = []\n    const promise = encodeObjectTree @ this, anObject, ctx, (err, entry) => ::\n      refs[entry.oid] = entry.content\n\n    const key = JSON.stringify @ `${this.token}refs`\n    return promise.then @ () =>\n      `{${key}: [\\n  ${refs.join(',\\n  ')} ]}\\n`\n\n  _boundFindPreserveForObj() ::\n    const lookupPreserver = this.lookupPreserver\n    return function(obj) ::\n      let entry = lookupPreserver(obj)\n      if undefined !== entry ::\n        return entry\n\n      entry = lookupPreserver(obj.constructor)\n      if undefined !== entry ::\n        return entry\n\n      let proto = obj\n      while null !== @ proto = Object.getPrototypeOf(proto) ::\n        let entry = lookupPreserver(proto)\n        if undefined !== entry ::\n          return entry\n\n\nclass ReviverNotFound extends Error ::\n\nconst createRegistry = Revitalization.create.bind(Revitalization)\n\nmodule.exports = exports = createRegistry()\nObject.assign @ exports\n  , @{} Revitalization, ReviverNotFound\n      , createRegistry, create: createRegistry\n"]}